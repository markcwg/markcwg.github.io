[{"id":"0a3a9562fcdec8d119937b1919ce2fb3","title":"Docker学习笔记","content":"零 特别说明\n本文是学习B站狂神说java的课程之后，整理而出\n对原课程感兴趣的小伙伴，可以点击传送门\n\n一 Docker概述1 Docker简介Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。一个完整的Docker有以下几个部分组成：\n\nDockerClient客户端\nDocker Daemon守护进程\nDocker Image镜像\nDockerContainer容器\n\n2 Docker的历史Docker 是 PaaS 提供商 dotCloud 开源的一个基于 LXC 的高级容器引擎，源代码托管在 Github 上, 基于go语言并遵从Apache2.0协议开源。\nDocker自2013年以来非常火热，无论是从 github 上的代码活跃度，还是Redhat在RHEL6.5中集成对Docker的支持, 就连 Google 的 Compute Engine 也支持 docker 在其之上运行。\n二 Docker的安装1 Docker组成\n\n镜像 image\n\ndocker镜像就好比是一个目标，可以通过这个目标来创建容器服务，tomcat镜像==&gt;run==&gt;容器（提 供服务器），通过这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器中的）\n\n容器 container\n\nDocker利用容器技术，独立运行一个或者一组应用，通过镜像来创建的. 启动，停止，删除，基本命令 目前就可以把这个容器理解为就是一个简易的 Linux系统。\n\n仓库 repository\n\n仓库就是存放镜像的地方！ 仓库分为公有仓库和私有仓库。(很类似git) Docker Hub是国外的。 阿里云…都有容器服务器(配置镜像加速!)\n2 安装Docker2.1 环境准备\nlinux内核要求3.0以上\n\n[root@iZvqu2nti7lrv4Z ~]# uname -r\n3.10.0-957.21.3.el7.x86_64\n[root@iZvqu2nti7lrv4Z ~]# cat &#x2F;etc&#x2F;os-release \nNAME&#x3D;&quot;CentOS Linux&quot;\nVERSION&#x3D;&quot;7 (Core)&quot;\nID&#x3D;&quot;centos&quot;\nID_LIKE&#x3D;&quot;rhel fedora&quot;\nVERSION_ID&#x3D;&quot;7&quot;\nPRETTY_NAME&#x3D;&quot;CentOS Linux 7 (Core)&quot;\nANSI_COLOR&#x3D;&quot;0;31&quot;\nCPE_NAME&#x3D;&quot;cpe:&#x2F;o:centos:centos:7&quot;\nHOME_URL&#x3D;&quot;https:&#x2F;&#x2F;www.centos.org&#x2F;&quot;\nBUG_REPORT_URL&#x3D;&quot;https:&#x2F;&#x2F;bugs.centos.org&#x2F;&quot;\n\nCENTOS_MANTISBT_PROJECT&#x3D;&quot;CentOS-7&quot;\nCENTOS_MANTISBT_PROJECT_VERSION&#x3D;&quot;7&quot;\nREDHAT_SUPPORT_PRODUCT&#x3D;&quot;centos&quot;\nREDHAT_SUPPORT_PRODUCT_VERSION&#x3D;&quot;7&quot;\n\n2.2 安装\ndocker官方的文档非常详细\n文档地址 https://docs.docker.com/engine/install/\n\n# 1.卸载旧版本\n sudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n#2.需要的安装包\nyum install -y yum-utils\n#3.设置镜像的仓库\nyum-config-manager \\\n--add-repo \\\nhttps:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo\n#默认是从国外的，不推荐\n#推荐使用国内的\nyum-config-manager \\\n--add-repo \\\nhttps:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo\n#更新yum软件包索引\nyum makecache fast\n#4.安装docker相关的 docker-ce 社区版 而ee是企业版\nyum install docker-ce docker-ce-cli containerd.io\n#5. 使用docker version查看是否按照成功\ndocker version\n#6. 测试\n[root@iZvqu2nti7lrv4Z ~]# docker run hello-world\nUnable to find image &#39;hello-world:latest&#39; locally\nlatest: Pulling from library&#x2F;hello-world\nb8dfde127a29: Pull complete \nDigest: sha256:5122f6204b6a3596e048758cabba3c46b1c937a46b5be6225b835d091b90e46c\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https:&#x2F;&#x2F;hub.docker.com&#x2F;\n\nFor more examples and ideas, visit:\n https:&#x2F;&#x2F;docs.docker.com&#x2F;get-started&#x2F;\n                 \n\n2.3 阿里云镜像加速\n登录阿里云找到容器服务\n找到镜像加速器\n\n\n\n根据自己的系统类型，选择相应脚本\n直接运行给出的脚本即可\n\n3 工作原理3.1 Docker是怎样工作的Docker是一个C-S结构的系统，其守护进程运行在主机上，通过Socket从客户端访问\nDocker-Server接受到Docker-Client的指令，就会执行这个指令。\n\n3.2 Docker为什么比VM快\ndocker有着比虚拟机更少的抽象层。由于docker不需要Hypervisor实现硬件资源虚拟化,运行在 docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在 效率上有明显优势。 \n\ndocker利用的是宿主机的内核,而不需要Guest OS。 \nGuest OS： VM（虚拟机）里的的系统（OS）;\nHost OS：物理机里的系统（OS）\n\n\n因此,当新建一个 容器时，docker不需要和虚拟机一样重新加载一个操作系统内核。然而避免引导、加载操作系统内核是个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，这个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了这个复杂的过程，因此 新建一个docker容器只需要几秒钟。\n三 Docker的常用命令1 帮助命令docker version #显示docker的版本信息\ndocker info #显示docker的系统信息，包括镜像和容器的数量\ndocker 命令A --help #查看命令A的帮助文档\n# 帮助文档的地址  https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;commandline&#x2F;build&#x2F;\n\n2 镜像命令docker images\t\t\t#查看所有本地主机的镜像，可以使用docker image ls代替\ndocker search  搜索镜像  # 搜索镜像 \ndocker pull 下载镜像\t #下载镜像\ndocker rmi 删除镜像\t     # 删除镜像\n\n2.1 docker images[root@iZvqu2nti7lrv4Z ~]# docker images\nREPOSITORY      TAG       IMAGE ID       CREATED        SIZE\ncaffeine-demo   latest    2307f21b0d43   38 hours ago   674MB\ntomcat          latest    c43a65faae57   2 weeks ago    667MB\nhello-world     latest    d1165f221234   2 months ago   13.3kB\njava            8         d23bdf5b1b1b   4 years ago    643MB\n\n#解释\n#REPOSITORY\t\t#镜像的仓库源\n#TAG\t\t\t#镜像的标签，版本号\n#IMAGE ID\t\t#镜像的id\n#CREATED\t\t#镜像的创建时间\n#SIZE\t\t\t#镜像的大小\n\n#可选项\n[root@iZvqu2nti7lrv4Z ~]# docker images --help\n\nUsage:  docker images [OPTIONS] [REPOSITORY[:TAG]]\n\nList images\nOptions:\n  -a, --all             Show all images (default hides intermediate images) #显示所有镜像\n      --digests         Show digests\n  -f, --filter filter   Filter output based on conditions provided  #根据条件过滤\n      --format string   Pretty-print images using a Go template\n      --no-trunc        Don&#39;t truncate output\n  -q, --quiet           Only show image IDs #只显示id\n\n\n\n2.2 docker pull[root@iZvqu2nti7lrv4Z ~]# docker pull mysql:5.7\n5.7: Pulling from library&#x2F;mysql  #如果不写tag，默认就是latest\n69692152171a: Already exists \t #分层下载 docker image 的核心，联合文件系统\n1651b0be3df3: Already exists \n951da7386bc8: Already exists \n0f86c95aa242: Already exists \n37ba2d8bd4fe: Already exists \n6d278bb05e94: Already exists \n497efbd93a3e: Already exists \na023ae82eef5: Already exists \ne76c35f20ee7: Already exists \ne887524d2ef9: Already exists \nccb65627e1c3: Already exists \nDigest: sha256:a682e3c78fc5bd941e9db080b4796c75f69a28a8cad65677c23f7a9f18ba21fa #签名 防伪\nStatus: Downloaded newer image for mysql:5.7\ndocker.io&#x2F;library&#x2F;mysql:5.7 #真实镜像地址\n\ndocker pull mysql:5.7 等价于\ndocker pull docker.io&#x2F;library&#x2F;mysql:5.7\n\n2.3 docker rmidocker rmi -f 镜像id #删除指定的镜像\ndocker rmi -f 镜像id 镜像id 镜像id 镜像id#删除指定的镜像\ndocker rmi -f $(docker images -aq) #删除全部的镜像\n\n3 容器命令docker run \t\t镜像ID\t#新建容器并启动\ndocker ps \t\t\t\t #列出所有运行中的容器\ndocker rm \t\t容器id\t#删除指定容器\ndocker start \t容器id\t#启动容器\ndocker restart \t容器id\t#重启容器\ndocker stop \t容器id\t#停止当前正在运行的容器\ndocker kill \t容器id\t#强制停止当前容器\n\n 使用docker container查看容器有关的命令\n[root@iZvqu2nti7lrv4Z ~]# docker container\n\nUsage:  docker container COMMAND\n\nManage containers\n\nCommands:\n  attach      Attach local standard input, output, and error streams to a running container\n  commit      Create a new image from a container&#39;s changes\n  cp          Copy files&#x2F;folders between a container and the local filesystem\n  create      Create a new container\n  diff        Inspect changes to files or directories on a container&#39;s filesystem\n  exec        Run a command in a running container\n  export      Export a container&#39;s filesystem as a tar archive\n  inspect     Display detailed information on one or more containers\n  kill        Kill one or more running containers\n  logs        Fetch the logs of a container\n  ls          List containers\n  pause       Pause all processes within one or more containers\n  port        List port mappings or a specific mapping for the container\n  prune       Remove all stopped containers\n  rename      Rename a container\n  restart     Restart one or more containers\n  rm          Remove one or more containers\n  run         Run a command in a new container\n  start       Start one or more stopped containers\n  stats       Display a live stream of container(s) resource usage statistics\n  stop        Stop one or more running containers\n  top         Display the running processes of a container\n  unpause     Unpause all processes within one or more containers\n  update      Update configuration of one or more containers\n  wait        Block until one or more containers stop, then print their exit codes\n\n\n3.1 新建容器并启动docker run [可选参数] image | docker container run [可选参数] image\n# 参数说明\n-- name\t\t指定容器名字\n-d\t\t\t使用后台方式运行\n-it\t\t\t使用交互方式运行，进入容器内部查看内容\n-p\t\t\t指定容器的端口 -p 9090(宿主机):8080(容器)\n\t-p ip:主机端口:容器端口\n\t-p 主机端口:容器端口（最常用）\n\t-p 容器端口\n-P \t\t\t随机指定端口\n\n#测试创建并启动容器\n[root@iZvqu2nti7lrv4Z ~]# docker run -d --name tomcat_test -p9000:8080  tomcat\ne4aa89a6f9efa326020922648a98ff7c6039cf10fff004999a628f96fa5a2030\n\n#在主机中使用curl命令测试\ncurl localhost:9000\n&lt;!doctype html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;&lt;title&gt;HTTP Status 404 – Not Found&lt;&#x2F;title&gt;&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;body &#123;font-family:Tahoma,Arial,sans-serif;&#125; h1, h2, h3, b &#123;color:white;background-color:#525D76;&#125; h1 &#123;font-size:22px;&#125; h2 &#123;font-size:16px;&#125; h3 &#123;font-size:14px;&#125; p &#123;font-size:12px;&#125; a &#123;color:black;&#125; .line &#123;height:1px;background-color:#525D76;border:none;&#125;&lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 404 – Not Found&lt;&#x2F;h1&gt;&lt;hr class&#x3D;&quot;line&quot; &#x2F;&gt;&lt;p&gt;&lt;b&gt;Type&lt;&#x2F;b&gt; Status Report&lt;&#x2F;p&gt;&lt;p&gt;&lt;b&gt;Description&lt;&#x2F;b&gt; The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.&lt;&#x2F;p&gt;&lt;hr class&#x3D;&quot;line&quot; &#x2F;&gt;&lt;h3&gt;Apache Tomcat&#x2F;9.0.46&lt;&#x2F;h3&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;[root@iZvqu2nti7lrv4Z ~]# \n\n#由于官方的tomcat镜像是精简版，webapps下并没有东西，所有返回的数据是404，但就以9000端口访问能成功，说明测试通过\n\n3.2 列出所有运行的容器docker ps \t#列出正在运行的所有容器\n-a\t\t#列出全部容器，包括非运行状态\n-n\t\t#查看指定个数的容器\n-q\t\t#仅查看容器id\n\n[root@iZvqu2nti7lrv4Z ~]# docker ps\nCONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                                       NAMES\ne4aa89a6f9ef   tomcat         &quot;catalina.sh run&quot;        3 minutes ago   Up 3 minutes   0.0.0.0:9000-&gt;8080&#x2F;tcp, :::9000-&gt;8080&#x2F;tcp   tomcat_test\n8da52d98564e   2307f21b0d43   &quot;java -jar &#x2F;app.jar …&quot;   41 hours ago    Up 41 hours    0.0.0.0:8999-&gt;8082&#x2F;tcp, :::8999-&gt;8082&#x2F;tcp   caffeine\n[root@iZvqu2nti7lrv4Z ~]# \n\n\n3.3 退出容器exit\t#容器停止退出\n快捷键 ctrl+P+Q #容器不停止退出\n\n3.4 删除容器docker rm 容器id\t\t#删除指定的容器，不能删除正在运行的容器，强制删除用 rm-rf\ndocker rm -f $(docker ps -aq) #删除所有容器\ndocker ps -a -q|xargs docker rm #删除所有容器\n\n3.5 启动和停止容器docker start 容器id #启动容器\ndocker restart 容器id #重启容器\ndocker stop 容器id #停止当前正在运行的容器\ndocker kill 容器id #强制停止当前容器\n\n4 其他常用命令4.1 后台启动命令docker run -d 镜像名\n#测试\n[root@iZvqu2nti7lrv4Z ~]# docker run -d centos\nUnable to find image &#39;centos:latest&#39; locally\nlatest: Pulling from library&#x2F;centos\n7a0437f04f83: Already exists \nDigest: sha256:5528e8b1b1719d34604c87e11dcd1c0a20bedf46e83b5632cdeac91b8c04efc1\nStatus: Downloaded newer image for centos:latest\n84731d41bcb3b5d368e6f262e49bae78e8a491e776efe5b0b44fd1e9155f0131\n[root@iZvqu2nti7lrv4Z ~]# docker ps\nCONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                                       NAMES\ne4aa89a6f9ef   tomcat         &quot;catalina.sh run&quot;        9 minutes ago   Up 9 minutes   0.0.0.0:9000-&gt;8080&#x2F;tcp, :::9000-&gt;8080&#x2F;tcp   tomcat_test\n8da52d98564e   2307f21b0d43   &quot;java -jar &#x2F;app.jar …&quot;   41 hours ago    Up 41 hours    0.0.0.0:8999-&gt;8082&#x2F;tcp, :::8999-&gt;8082&#x2F;tcp   caffeine\n[root@iZvqu2nti7lrv4Z ~]# \n\n#可以发现在docker ps下并没有刚才启动的centos容器，这是一个常见的坑：\n# docker容器使用后台运行，必须要有一个前台进程，docker发现没有应用，就会自动停止\n#比如nginx容器启动后，发现自己没有提供服务，就会立刻停止\n\n4.2 查看日志[root@iZvqu2nti7lrv4Z ~]# docker logs --help\n\nUsage:  docker logs [OPTIONS] CONTAINER\n\nFetch the logs of a container\n\nOptions:\n      --details        Show extra details provided to logs\n  -f, --follow         Follow log output\n      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or\n                       relative (e.g. 42m for 42 minutes)\n  -n, --tail string    Number of lines to show from the end of the logs (default &quot;all&quot;)\n  -t, --timestamps     Show timestamps\n      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or\n                       relative (e.g. 42m for 42 minutes)\n[root@iZvqu2nti7lrv4Z ~]# \n\n\n4.3 查看容器中进程信息docker top 容器id\n\n4.4 查看镜像的元数据docker inspect 容器id\n\n4.5 进入当前正在运行的容器#方式一\ndocker exec -it 容器id bashshell\n\n#方式二\ndocker attach 容器id\n\n4.6 从容器内拷贝内容到主机docker cp 容器id：容器内路径 主机目的路径\n\n四 小结1 常用命令总结\nattach\t\tAttach local standard input, output, and error streams to a running container #当前shell下 attach连接指定运行的镜像\nbuild \t\tBuild an image from a Dockerfile # 通过Dockerfile定制镜像\ncommit \t\tCreate a new image from a container&#39;s changes #提交当前容器为新的镜像\ncp \t\t\tCopy files&#x2F;folders between a container and the local filesystem #拷贝文件\ncreate \t\tCreate a new container #创建一个新的容器\ndiff \t\tInspect changes to files or directories on a container&#39;s filesystem #查看docker容器的变化\nevents \t\tGet real time events from the server # 从服务获取容器实时时间\nexec \t\tRun a command in a running container # 在运行中的容器上运行命令\nexport \t\tExport a container&#39;s filesystem as a tar archive #导出容器文件系统作为一个tar归档文件[对应import]\nhistory \tShow the history of an image # 展示一个镜像形成历史\nimages \t\tList images #列出系统当前的镜像\nimport \t\tImport the contents from a tarball to create a filesystem image #从tar包中导入内容创建一个文件系统镜像\ninfo \t\tDisplay system-wide information # 显示全系统信息\ninspect \tReturn low-level information on Docker objects #查看容器详细信息\nkill \t\tKill one or more running containers # kill指定docker容器\nload \t\tLoad an image from a tar archive or STDIN #从一个tar包或标准输入中加载一个镜像[对应save]\nlogin \t\tLog in to a Docker registry #\nlogout \t\tLog out from a Docker registry\nlogs \t\tFetch the logs of a container\npause \t\tPause all processes within one or more containers\nport \t\tList port mappings or a specific mapping for the container\nps \t\t\tList containers\npull \t\tPull an image or a repository from a registry\npush \t\tPush an image or a repository to a registry\nrename \t\tRename a container\nrestart \tRestart one or more containers\nrm \t\t\tRemove one or more containers\nrmi \t\tRemove one or more images\nrun \t\tRun a command in a new container\nsave \t\tSave one or more images to a tar archive (streamed to STDOUT by default)\nsearch \t\tSearch the Docker Hub for images\nstart \t\tStart one or more stopped containers\nstats \t\tDisplay a live stream of container(s) resource usage statistics\nstop \t\tStop one or more running containers\ntag \t\tCreate a tag TARGET_IMAGE that refers to SOURCE_IMAGE\ntop \t\tDisplay the running processes of a container\nunpause \tUnpause all processes within one or more containers\nupdate \t\tUpdate configuration of one or more containers\nversion \tShow the Docker version information\nwait \t\tBlock until one or more containers stop, then print their exit codes\n\n2 实战2.1 部署nginx[root@iZvqu2nti7lrv4Z ~]# docker run -d --name nginx01 -p 8888:80 nginx\n82c81f57ad6c802a188e6390bf461978b2c4ec10bb6535ff78bdc6590680c5a3\n[root@iZvqu2nti7lrv4Z ~]# docker ps\nCONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                                   NAMES\n82c81f57ad6c   nginx     &quot;&#x2F;docker-entrypoint.…&quot;   7 seconds ago   Up 6 seconds   0.0.0.0:8888-&gt;80&#x2F;tcp, :::8888-&gt;80&#x2F;tcp   nginx01\n\n#测试\n[root@iZvqu2nti7lrv4Z ~]# curl localhost:8888\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Welcome to nginx!&lt;&#x2F;title&gt;\n&lt;style&gt;\n    body &#123;\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    &#125;\n&lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;h1&gt;Welcome to nginx!&lt;&#x2F;h1&gt;\n&lt;p&gt;If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.&lt;&#x2F;p&gt;\n\n&lt;p&gt;For online documentation and support please refer to\n&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;nginx.org&#x2F;&quot;&gt;nginx.org&lt;&#x2F;a&gt;.&lt;br&#x2F;&gt;\nCommercial support is available at\n&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;nginx.com&#x2F;&quot;&gt;nginx.com&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;\n\n&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n\n\n\n\n\n\n\n\n\n这里有一个问题，当我们每次修改nginx的配置文件时，都需要进入容器内部，十分麻烦。后续有解决方案\n2.2 部署tomcat[root@iZvqu2nti7lrv4Z ~]# docker run -d -p 8080:8080 tomcat\n0807515f23a7052da2395f4d88c89cdaaee9f889b5c6bb1898a5efbdddf155ae\n[root@iZvqu2nti7lrv4Z ~]# curl localhost:8080\n&lt;!doctype html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;&lt;title&gt;HTTP Status 404 – Not Found&lt;&#x2F;title&gt;&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;body &#123;font-family:Tahoma,Arial,sans-serif;&#125; h1, h2, h3, b &#123;color:white;background-color:#525D76;&#125; h1 &#123;font-size:22px;&#125; h2 &#123;font-size:16px;&#125; h3 &#123;font-size:14px;&#125; p &#123;font-size:12px;&#125; a &#123;color:black;&#125; .line &#123;height:1px;background-color:#525D76;border:none;&#125;&lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 404 – Not Found&lt;&#x2F;h1&gt;&lt;hr class&#x3D;&quot;line&quot; &#x2F;&gt;&lt;p&gt;&lt;b&gt;Type&lt;&#x2F;b&gt; Status Report&lt;&#x2F;p&gt;&lt;p&gt;&lt;b&gt;Description&lt;&#x2F;b&gt; The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.&lt;&#x2F;p&gt;&lt;hr class&#x3D;&quot;line&quot; &#x2F;&gt;&lt;h3&gt;Apache Tomcat&#x2F;9.0.46&lt;&#x2F;h3&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;[root@iZvqu2nti7lrv4Z ~]# \n\n#镜像是精简版，保证为最小镜像。将不必要的都踢出了 -&gt; 保证最小可运行环境\n\n\n\n\n\n\n\n\n\n\n这里有一个问题，我们以后要部署的时候每次都要进入容器，岂不是很麻烦？如果在容器外有一个映射路径，我们在外部放置项目，就自动同步到容器内，就完美解决\n2.3 部署es# 创建启动一个es7.6.2的容器\n[root@iZvqu2nti7lrv4Z ~]# docker run -d --name es01 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type&#x3D;single-node&quot; elasticsearch:7.6.2\nfdca27a465a1da6c1635c0667f8b147e5b61d295ef29bb64eadefa42f50f416e\n[root@iZvqu2nti7lrv4Z ~]# docker stats es01\n# 这里使用docker stats命令查看该镜像的内存占用状态\n\n\n\n\n\n\n\n\n\n\n\n发现仅是启动 一个ES容器，就让内存处于高度占用状态，所以启动es需要做内存限制\n#内存限制启动\n[root@iZvqu2nti7lrv4Z ~]# docker run -d --name es02 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type&#x3D;single-node&quot; -e ES_JAVA_OPTS&#x3D;&quot;-Xms64m -Xmx512m&quot; elasticsearch:7.6.2\n7af7003f7bd2710b28f10af5179212715bdcb30507b5b4e1b2766b5040f3f59e\n[root@iZvqu2nti7lrv4Z ~]# docker stats es02\n\n\n\n\n\n\n\n\n\n\n\n\n可以发现，内存使用情况明显优化\n# 使用curl命令测试\n[root@iZvqu2nti7lrv4Z ~]# curl localhost:9200\n&#123;\n  &quot;name&quot; : &quot;7af7003f7bd2&quot;,\n  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,\n  &quot;cluster_uuid&quot; : &quot;eSOu8veQThSYjAh8ArYCOg&quot;,\n  &quot;version&quot; : &#123;\n    &quot;number&quot; : &quot;7.6.2&quot;,\n    &quot;build_flavor&quot; : &quot;default&quot;,\n    &quot;build_type&quot; : &quot;docker&quot;,\n    &quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,\n    &quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;,\n    &quot;build_snapshot&quot; : false,\n    &quot;lucene_version&quot; : &quot;8.4.0&quot;,\n    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,\n    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;\n  &#125;,\n  &quot;tagline&quot; : &quot;You Know, for Search&quot;\n&#125;\n\n\n五 Docker镜像1 镜像是什么\n\n\n\n\n\n\n\n\n镜像是一种轻量级、可执行的独立软件包。用来打包软件运行环境和给予运行环境开发的软件，它包含运行某一个软件所需要的所有内容（源代码、运行时库、环境变量和配置文件等等）\n将所有的应用和环境，直接打包为docker镜像，就可以直接运行\n2 Docker镜像加载原理2.1 UnionFs 联合文件系统\n\n\n\n\n\n\n\n\n UnionFs（联合文件系统）：Union文件系统（UnionFs）是一种分层、轻量级并且高性能的文件系统，它支持将对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（ unite several directories into a single virtual filesystem)。Union文件系统是 Docker镜像的基础。\n镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应 用镜像。 \n特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系 统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。\n2.2 Docker镜像加载原理\n\n\n\n\n\n\n\n\ndocker的镜像实际上是由一层一层的文件系统组成的。\nboots(boot file system）主要包含 bootloader和 Kernel, bootloader主要是引导加 kernel, Linux刚启动时会加bootfs文件系统，在 Docker镜像的最底层是 boots。这一层与我们典型的 Linux/Unix系统是一样的，包含boot加載器和内核。当boot加载完成之后整个内核就都在内存中了，此时 内存的使用权已由 bootfs转交给内核，此时系统也会卸载bootfs。\n rootfs（root file system),在 bootfs之上。包含的就是典型 Linux系统中 的/dev,/proc,/bin,/etc等标准目录和文件。 rootfs就是各种不同的操作系统发行版，比如 Ubuntu, Centos等等。\n2.3 为什么Docker很小，而虚拟机很大\n\n\n\n\n\n\n\n\n对于一个精简的OS， rootfs可以很小。只需要包含最基本的命令、工具和程序就可以了，因为底层直接用Host的kernel，自己只要提供rootfs就可以了。由此可见对于不同的Linux发行版，bootfs基本是一致的，rootfs会有差别。因此不同的发行版可以公用bootfs\n2.2 commit命令docker commit #提交容器成为一个新的镜像\n\n#命令和git类似\ndocker commit -m&#x3D;“描述信息” -a&#x3D;”作者信息“ 容器id 目标镜像名[:TAG]\n\n六 容器数据卷1 数据卷概述\n\n\n\n\n\n\n\n\ndocker将应用和环境打包成一个镜像。如果数据都在容器中，那么删除容器之后，数据就会丢失。我们需要保持数据持久化。\n容器之间可以有一个数据共享的技术。 Docker容器产生的数据也可以同步到本地，这就是卷技术。目录的挂载，将我们容器内的目录挂载到宿主机上\n2 使用数据卷#使用 -v 命令挂载\ndocker run -it -v 主机目录:容器内目录 -p 主机端口:容器内端口\n\n#测试\n#启动一个centos容器\n[root@iZvqu2nti7lrv4Z ~]# docker run -it -v &#x2F;home&#x2F;docker-test-volume&#x2F;test:&#x2F;home centos &#x2F;bin&#x2F;bash\n#进入容器内部并新建文件test.java\n[root@736c6060e2af &#x2F;]# cd &#x2F;home\n[root@736c6060e2af home]# ls -l\ntotal 0\n[root@736c6060e2af home]# touch test.java\n[root@736c6060e2af home]# ls -l\ntotal 0\n-rw-r--r-- 1 root root 0 May 28 12:48 test.java\n#使用快捷键Ctrl+P+Q不停止容器的方式退出容器\n[root@736c6060e2af home]# [root@iZvqu2nti7lrv4Z ~]# \n#在宿主机对应的目录下出现了相同文件\n[root@iZvqu2nti7lrv4Z ~]# cd &#x2F;home&#x2F;docker-test-volume&#x2F;test&#x2F;\n[root@iZvqu2nti7lrv4Z test]# ll -l\ntotal 0\n-rw-r--r-- 1 root root 0 May 28 20:48 test.java\n[root@iZvqu2nti7lrv4Z test]# \n\n\n3 具名和匿名挂载#匿名挂载\n-v 容器内路径\n[root@iZvqu2nti7lrv4Z test]# docker run -d -P --name nginx01 -v &#x2F;etc&#x2F;nginx nginx\n#查看所有volume情况\n[root@iZvqu2nti7lrv4Z test]# docker volume ls\nDRIVER    VOLUME NAME\nlocal     5b675e30f9d5e407233f4b4c1ac83c0ee1bee4568ca5b5feabd64e500f0b1005\nlocal     56d537304857d5f897c99723e18881f17796ec14ea303d261cced0a7055bac55\nlocal     988ec326af3eb9aaebfbf2d97ec2c536b0a30ca6e697ba2bef5e8f413b75a9c7\nlocal     3787a4575d7b7f93bb890f510ba922389b9b58f81e6b30ca4d01e966ce43341f\nlocal     05979ca458ff2f55bae1b0d98d95c506737e1b4a7a254b8b4a4005df0542c9c3\nlocal     1822937c3bdec2296f429a4ad5c49010e1d0400396e8ca60c304ba451dd285f9\nlocal     62088671585a06d219957df4ee739dddb76924b6514588e026519dff60d416d7\nlocal     e7a09b9bac98c36cfec787aed4ada3a3af73d9cb9069079285322361d7f6c420\nlocal     f979d4899f7cdeeea713242faff699d8daa611359de9396fac7edf0cccbec40e\n#具名挂载\n[root@iZvqu2nti7lrv4Z test]# docker run -d -P --name nginx02 -v juming-nginx:&#x2F;etc&#x2F;nginx nginx\nDRIVER    VOLUME NAME\nlocal     5b675e30f9d5e407233f4b4c1ac83c0ee1bee4568ca5b5feabd64e500f0b1005\nlocal     56d537304857d5f897c99723e18881f17796ec14ea303d261cced0a7055bac55\nlocal     988ec326af3eb9aaebfbf2d97ec2c536b0a30ca6e697ba2bef5e8f413b75a9c7\nlocal     3787a4575d7b7f93bb890f510ba922389b9b58f81e6b30ca4d01e966ce43341f\nlocal     05979ca458ff2f55bae1b0d98d95c506737e1b4a7a254b8b4a4005df0542c9c3\nlocal     1822937c3bdec2296f429a4ad5c49010e1d0400396e8ca60c304ba451dd285f9\nlocal     62088671585a06d219957df4ee739dddb76924b6514588e026519dff60d416d7\nlocal     e7a09b9bac98c36cfec787aed4ada3a3af73d9cb9069079285322361d7f6c420\nlocal     f979d4899f7cdeeea713242faff699d8daa611359de9396fac7edf0cccbec40e\nlocal     juming-nginx\n# 可以查看这个卷\n[root@iZvqu2nti7lrv4Z test]# docker volume inspect juming-nginx\n[\n    &#123;\n        &quot;CreatedAt&quot;: &quot;2021-05-28T20:55:41+08:00&quot;,\n        &quot;Driver&quot;: &quot;local&quot;,\n        &quot;Labels&quot;: null,\n        &quot;Mountpoint&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;juming-nginx&#x2F;_data&quot;,\n        &quot;Name&quot;: &quot;juming-nginx&quot;,\n        &quot;Options&quot;: null,\n        &quot;Scope&quot;: &quot;local&quot;\n    &#125;\n]\n\n\n\n\n\n\n\n\n\n\n所有的docker容器内的卷，没有指定目录的情况下都是在 /var/lib/docker/volumes/xxxx/_data 下 如果指定了目录，docker volume ls 是查看不到的。\n#三钟挂载： 匿名挂载、具名挂载、指定路径挂载\n-v 容器内路径\t\t     #匿名挂载\n-v 卷名:容器内路径\t\t   \t#具名挂载\n-v &#x2F;宿主机路径:容器内路径\t  #指定路径挂载\n\n\n扩展\n\n# 通过 -v 容器内路径： ro rw 改变读写权限\nro #readonly 只读\nrw #readwrite 可读可写\ndocker run -d -P --name nginx05 -v juming:&#x2F;etc&#x2F;nginx:ro nginx\ndocker run -d -P --name nginx05 -v juming:&#x2F;etc&#x2F;nginx:rw nginx\n# ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作！\n\n4 初始Dockerfile# 创建一个dockerfile文件，名字可以随便 建议Dockerfile\n# 文件中的内容 指令(大写) 参数\nFROM centos\nVOLUME [&quot;volume01&quot;,&quot;volume02&quot;]\nCMD echo &quot;----end----&quot;\nCMD &#x2F;bin&#x2F;bash\n#这里的每个命令，就是镜像的一层\n\n#启动自己的镜像,注意 docker build命令最后有一个. 缺少这个.会报错\n[root@iZvqu2nti7lrv4Z ~]# docker build -f &#x2F;home&#x2F;docker-test-volume&#x2F;dockerfile1 -t myself&#x2F;centos:1.0 .\nSending build context to Docker daemon  307.3kB\nStep 1&#x2F;4 : FROM centos\n ---&gt; 300e315adb2f\nStep 2&#x2F;4 : VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]\n ---&gt; Running in d0efeffa082f\nRemoving intermediate container d0efeffa082f\n ---&gt; d902d4cc0fca\nStep 3&#x2F;4 : CMD echo &quot;......end......&quot;\n ---&gt; Running in 77df08d8bb74\nRemoving intermediate container 77df08d8bb74\n ---&gt; 293026ed5542\nStep 4&#x2F;4 : CMD &#x2F;bin&#x2F;bash\n ---&gt; Running in 24b146eed903\nRemoving intermediate container 24b146eed903\n ---&gt; ac1708167fec\nSuccessfully built ac1708167fec\nSuccessfully tagged myself&#x2F;centos:1.0\n\n\n七 Dockerfile1 Dockerfile介绍\n\n\n\n\n\n\n\n\nDockerfile是用来构建docker镜像的文件。命令参数脚本\n构建步骤：\n\n编写一个dockerfile文件\ndocker build 构建为一个镜像\ndocker run运行镜像\ndocker push发布镜像（DockerHub、阿里云仓库）\n\n2 Dockerfile构建过程\n\n\n\n\n\n\n\n\n基础知识：\n\n每个保留关键字（指令）都必须是大写字母\n执行顺序为从上到下\n#表示注释\n每一个指令都会创建并提交一个新的镜像\n\nDockerfile是面向开发的，我们以后要发布项目、做镜像都需要编写Dockerfile文件。\n3 Dockerfile常用指令FROM \t\t\t# 基础镜像，一切从这里开始构建\nMAINTAINER \t\t# 镜像是谁写的， 姓名+邮箱\nRUN \t\t\t# 镜像构建的时候需要运行的命令\nADD \t\t\t# 步骤，tomcat镜像，这个tomcat压缩包！添加内容 添加同目录\nWORKDIR \t\t# 镜像的工作目录\nVOLUME \t\t\t# 挂载的目录\nEXPOSE \t\t\t# 保留端口配置\nCMD \t\t\t# 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代。\nENTRYPOINT \t\t# 指定这个容器启动的时候要运行的命令，可以追加命令\nONBUILD \t\t# 当构建一个被继承 DockerFile 这个时候就会运行ONBUILD的指令，触发指令。\nCOPY \t\t\t# 类似ADD，将我们文件拷贝到镜像中\nENV \t\t\t# 构建的时候设置环境变量！\n\n4 实战测试：制作一个tomcat镜像4.1 准备镜像文件#去官网下载压缩包，使用ftp上传到linux中\n[root@iZvqu2nti7lrv4Z tomcat]# ls -l\ntotal 151588\n-rw-r--r-- 1 root root  11496577 May 26 15:46 apache-tomcat-9.0.46.tar.gz\n-rw-r--r-- 1 root root       640 May 26 16:12 Dockerfile\n-rw-r--r-- 1 root root 143722924 May 26 15:49 jdk-8u281-linux-x64.tar.gz\n-rw-r--r-- 1 root root         0 May 26 15:53 readme.txt\n\n\n4.2 编写Dockerfile#从centos中构建\nFROM centos\n#添加作者信息\nMAINTAINER markcwg&lt;markcwg@163.com&gt;\n#复制文件\nCOPY readme.txt &#x2F;usr&#x2F;local&#x2F;readme.txt\n#添加tomcat压缩包，build时会自动解压\nADD apache-tomcat-9.0.46.tar.gz &#x2F;usr&#x2F;local&#x2F;\n#添加jdk压缩包\nADD jdk-8u281-linux-x64.tar.gz &#x2F;usr&#x2F;local&#x2F;\n#在新镜像中安装vim命令\nRUN yum -y install vim\n#设置环境变量\nENV MYPATH &#x2F;usr&#x2F;local\nWORKDIR $MYPATH\n\nENV JAVA_HOME &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_281\nENV CLASSPATH $JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar\nENV CATALINA_HOME &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46\nENV CATALINA_BASH &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46\nENV PATH $PATH:$JAVA_HOME&#x2F;bin:$CATALINA_HOME&#x2F;lib:$CATALINA_HOME&#x2F;bin\n#向外暴露8080端口\nEXPOSE 8080\n#设置默认命令\nCMD &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46&#x2F;bin&#x2F;startup.sh &amp;&amp; tail -F &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46&#x2F;bin&#x2F;logs&#x2F;catalina.out\n\n\n4.3 构建镜像#因为Dockerfile文件的命令是默认名，所有不用-f指定构建文件\n[root@iZvqu2nti7lrv4Z tomcat]# docker build  -t mytomcat:1.1 .\nSending build context to Docker daemon  155.2MB\nStep 1&#x2F;15 : FROM centos\n ---&gt; 300e315adb2f\nStep 2&#x2F;15 : MAINTAINER markcwg&lt;markcwg@163.com&gt;\n ---&gt; Running in efea032af268\nRemoving intermediate container efea032af268\n ---&gt; ae1e109cc4d3\nStep 3&#x2F;15 : COPY readme.txt &#x2F;usr&#x2F;local&#x2F;readme.txt\n ---&gt; e313f645396e\nStep 4&#x2F;15 : ADD apache-tomcat-9.0.46.tar.gz &#x2F;usr&#x2F;local&#x2F;\n ---&gt; 32a2d5d9e146\nStep 5&#x2F;15 : ADD jdk-8u281-linux-x64.tar.gz &#x2F;usr&#x2F;local&#x2F;\n ---&gt; 4fcf865bcd44\nStep 6&#x2F;15 : RUN yum -y install vim\n ---&gt; Running in 089e3f45170d\nCentOS Linux 8 - AppStream                      6.9 MB&#x2F;s | 6.3 MB     00:00    \nCentOS Linux 8 - BaseOS                         2.1 MB&#x2F;s | 2.3 MB     00:01    \nCentOS Linux 8 - Extras                          16 kB&#x2F;s | 9.6 kB     00:00    \nDependencies resolved.\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n Package             Arch        Version                   Repository      Size\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nInstalling:\n vim-enhanced        x86_64      2:8.0.1763-15.el8         appstream      1.4 M\nInstalling dependencies:\n gpm-libs            x86_64      1.20.7-15.el8             appstream       39 k\n vim-common          x86_64      2:8.0.1763-15.el8         appstream      6.3 M\n vim-filesystem      noarch      2:8.0.1763-15.el8         appstream       48 k\n which               x86_64      2.21-12.el8               baseos          49 k\n\nTransaction Summary\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nInstall  5 Packages\n\nTotal download size: 7.8 M\nInstalled size: 30 M\nDownloading Packages:\n(1&#x2F;5): gpm-libs-1.20.7-15.el8.x86_64.rpm        174 kB&#x2F;s |  39 kB     00:00    \n(2&#x2F;5): vim-common-8.0.1763-15.el8.x86_64.rpm     20 MB&#x2F;s | 6.3 MB     00:00    \n(3&#x2F;5): vim-filesystem-8.0.1763-15.el8.noarch.rp 494 kB&#x2F;s |  48 kB     00:00    \n(4&#x2F;5): vim-enhanced-8.0.1763-15.el8.x86_64.rpm  4.0 MB&#x2F;s | 1.4 MB     00:00    \n(5&#x2F;5): which-2.21-12.el8.x86_64.rpm             2.1 MB&#x2F;s |  49 kB     00:00    \n--------------------------------------------------------------------------------\nTotal                                           3.8 MB&#x2F;s | 7.8 MB     00:02     \nwarning: &#x2F;var&#x2F;cache&#x2F;dnf&#x2F;appstream-02e86d1c976ab532&#x2F;packages&#x2F;gpm-libs-1.20.7-15.el8.x86_64.rpm: Header V3 RSA&#x2F;SHA256 Signature, key ID 8483c65d: NOKEY\nCentOS Linux 8 - AppStream                      1.6 MB&#x2F;s | 1.6 kB     00:00    \nImporting GPG key 0x8483C65D:\n Userid     : &quot;CentOS (CentOS Official Signing Key) &lt;security@centos.org&gt;&quot;\n Fingerprint: 99DB 70FA E1D7 CE22 7FB6 4882 05B5 55B3 8483 C65D\n From       : &#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-centosofficial\nKey imported successfully\nRunning transaction check\nTransaction check succeeded.\nRunning transaction test\nTransaction test succeeded.\nRunning transaction\n  Preparing        :                                                        1&#x2F;1 \n  Installing       : which-2.21-12.el8.x86_64                               1&#x2F;5 \n  Installing       : vim-filesystem-2:8.0.1763-15.el8.noarch                2&#x2F;5 \n  Installing       : vim-common-2:8.0.1763-15.el8.x86_64                    3&#x2F;5 \n  Installing       : gpm-libs-1.20.7-15.el8.x86_64                          4&#x2F;5 \n  Running scriptlet: gpm-libs-1.20.7-15.el8.x86_64                          4&#x2F;5 \n  Installing       : vim-enhanced-2:8.0.1763-15.el8.x86_64                  5&#x2F;5 \n  Running scriptlet: vim-enhanced-2:8.0.1763-15.el8.x86_64                  5&#x2F;5 \n  Running scriptlet: vim-common-2:8.0.1763-15.el8.x86_64                    5&#x2F;5 \n  Verifying        : gpm-libs-1.20.7-15.el8.x86_64                          1&#x2F;5 \n  Verifying        : vim-common-2:8.0.1763-15.el8.x86_64                    2&#x2F;5 \n  Verifying        : vim-enhanced-2:8.0.1763-15.el8.x86_64                  3&#x2F;5 \n  Verifying        : vim-filesystem-2:8.0.1763-15.el8.noarch                4&#x2F;5 \n  Verifying        : which-2.21-12.el8.x86_64                               5&#x2F;5 \n\nInstalled:\n  gpm-libs-1.20.7-15.el8.x86_64         vim-common-2:8.0.1763-15.el8.x86_64    \n  vim-enhanced-2:8.0.1763-15.el8.x86_64 vim-filesystem-2:8.0.1763-15.el8.noarch\n  which-2.21-12.el8.x86_64             \n\nComplete!\nRemoving intermediate container 089e3f45170d\n ---&gt; 64ea2b10fc7c\nStep 7&#x2F;15 : ENV MYPATH &#x2F;usr&#x2F;local\n ---&gt; Running in 81236ec8fca6\nRemoving intermediate container 81236ec8fca6\n ---&gt; eb6b6f51ffb0\nStep 8&#x2F;15 : WORKDIR $MYPATH\n ---&gt; Running in e741e32b5960\nRemoving intermediate container e741e32b5960\n ---&gt; dd0a487f4a2d\nStep 9&#x2F;15 : ENV JAVA_HOME &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_281\n ---&gt; Running in 8dbfe95fd0b3\nRemoving intermediate container 8dbfe95fd0b3\n ---&gt; 6ea6169ee1ee\nStep 10&#x2F;15 : ENV CLASSPATH $JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar\n ---&gt; Running in e90cb056361d\nRemoving intermediate container e90cb056361d\n ---&gt; 5a1b948161dd\nStep 11&#x2F;15 : ENV CATALINA_HOME &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46\n ---&gt; Running in 30f905d48369\nRemoving intermediate container 30f905d48369\n ---&gt; de012879e567\nStep 12&#x2F;15 : ENV CATALINA_BASH &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46\n ---&gt; Running in ea5dca7af158\nRemoving intermediate container ea5dca7af158\n ---&gt; 99ab62f6273a\nStep 13&#x2F;15 : ENV PATH $PATH:$JAVA_HOME&#x2F;bin:$CATALINA_HOME&#x2F;lib:$CATALINA_HOME&#x2F;bin\n ---&gt; Running in 6696d365be61\nRemoving intermediate container 6696d365be61\n ---&gt; 5d2990e0a50a\nStep 14&#x2F;15 : EXPOSE 8080\n ---&gt; Running in dcae8528fd4d\nRemoving intermediate container dcae8528fd4d\n ---&gt; e4fe06ff860b\nStep 15&#x2F;15 : CMD &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46&#x2F;bin&#x2F;startup.sh &amp;&amp; tail -F &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46&#x2F;bin&#x2F;logs&#x2F;catalina.out\n ---&gt; Running in ef6b1d933cc8\nRemoving intermediate container ef6b1d933cc8\n ---&gt; e68214b7b889\nSuccessfully built e68214b7b889\nSuccessfully tagged mytomcat:1.1\n\n\n4.4 运行镜像[root@iZvqu2nti7lrv4Z tomcat]# docker run -d -p 8080:8080 --name test-tomcat mytomcat:1.1\ncfe53d1d9fe74f6d29a7a22b9d95ba437c311f8ed75b58db1a7fe02609082d87\n\n\n4.5 访问测试\n八 Springboot项目打包\n\n\n\n\n\n\n\n\n\n新建一个spingboot项目，也可以直接 git clone &#x67;&#105;&#x74;&#x40;&#103;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d;:markcwg/caffeine.git\n\nmvn package将项目打包\n\n新建并编写Dockerfile\nFROM java:8\n\nCOPY *.jar &#x2F;app.jar\n\nCMD [&quot;--server.port&#x3D;8082&quot;]\n\nEXPOSE 8082\n\nENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;&#x2F;app.jar&quot;]\n构建镜像\n\n发布运行\n\n\n","slug":"docker笔记","date":"2021-05-27T02:32:36.000Z","categories_index":"学习笔记","tags_index":"Docker,DevOps,容器化技术,自动部署","author_index":"Markcwg"},{"id":"72457e8b36247574c98b06854f984801","title":"Vue 常用经典开源项目汇总","content":"\nVue常用经典开源项目汇总参考-海量\n　　Vue是什么？\n　　Vue.js（读音 /vjuː/, 类似于 view） 是一套构建用户界面的 渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用单文件组件和 Vue 生态系统支持的库开发的复杂单页应用。\n\n\n　　Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。\n　　易用（已经会了HTML,CSS,JavaScript即可轻松上手）、灵活（简单小巧的核心，渐进式技术栈，足以应付任何规模的应用）、性能（17kb min+gzip 运行大小、超快虚拟DOM、最省心的优化）、渐进式JavaScript 框架。\n　　Vue.js 是我在2014年2月开源的一个前端开发库，通过简洁的 API 提供高效的数据绑定和灵活的组件系统。在前端纷繁复杂的生态中，Vue.js有幸受到一定程度的关注，目前在 GitHub上已经有快6000+的star。\n　　Vue相关网站参考：\n　　Vue中文帮助网站：http://cn.vuejs.org/\n　　Vue github开源地址：https://github.com/vuejs/vue\n　　Vue.js专业中文社区：http://www.vue-js.com/\n　　前端开发Vue相关：http://www.opendigg.com/tags/front-vue\n　　本文开源地址：https://github.com/yonghu86/awesome-github-vue\n　　本文主要是收集与整理Vue相关的开源资料，以供需要的朋友参考。主要包含以下几方面的内容：\n　　UI组件、开发框架、实用库、服务端、辅助工具、应用实例、Demo示例\nUI组件\n\nelement★9305 - 饿了么出品的Vue2的web UI工具套件 \nVux★6802 - 基于Vue和WeUI的组件库 \nmint-ui★4776 - Vue 2的移动UI元素 \niview★4458 - 基于 Vuejs 的开源 UI 组件库 \nKeen-UI★2363 - 轻量级的基本UI组件合集 \nvue-material★2207 - 通过Vue Material和Vue 2建立精美的app应用 \nmuse-ui★1992 - 三端样式一致的响应式 UI 库 \nvuetify★1678 - 为移动而生的Vue JS 2组件框架 \nvonic★1494 - 快速构建移动端单页应用 \neme★1390 - 优雅的Markdown编辑器 \nvue-multiselect★1166 - Vue.js选择框解决方案 \nvue-table★824 - 简化数据表格 \nVueCircleMenu★776 - 漂亮的vue圆环菜单 \nvue-chat★748 - vuejs和vuex及webpack的聊天示例 \nradon-ui★633 - 快速开发产品的Vue组件库 \nvue-waterfall★605 - Vue.js的瀑布布局组件 \nvue-carbon★595 - 基于 vue 开发MD风格的移动端 \nvue-beauty★569 - 由vue和ant design创建的优美UI组件 \nvue-blu★557 - 帮助你轻松创建web应用 \nvueAdmin★556 - 基于vuejs2和element的简单的管理员模板 \nvue-syntax-highlight★551 - Sublime Text语法高亮 \nvue-infinite-scroll★524 - VueJS的无限滚动指令 \nVue.Draggable★493 - 实现拖放和视图模型数组同步 \nvue-awesome-swiper★476 - vue.js触摸滑动组件 \nvue-calendar★465 - 日期选择插件 \nbootstrap-vue★458 - 应用于Vuejs2的Twitter的Bootstrap 4组件 \nvue-swipe★361 - VueJS触摸滑块 \nvue-amap★346 - 基于Vue 2和高德地图的地图组件 \nvue-chartjs★333 - vue中的Chartjs的封装 \nvue-datepicker★331 - 日历和日期选择组件 \nmarkcook★318 - 好看的markdown编辑器 \nvue-google-maps★287 - 带有双向数据绑定Google地图组件 \nvue-progressbar★248 - vue轻量级进度条 \nvue-picture-input★236 - 移动友好的图片文件输入组件 \nvue-infinite-loading★224 - VueJS的无限滚动插件 \nvue-upload-component★204 - Vuejs文件上传组件 \nvue-datetime-picker★197 - 日期时间选择控件 \nvue-scroller★196 - Vonic UI的功能性组件 \nvue2-calendar★181 - 支持lunar和日期事件的日期选择器 \nvue-video-player★178 - VueJS视频及直播播放器 \nvue-fullcalendar★176 - 基于vue.js的全日历组件 \nrubik★170 - 基于Vuejs2的开源 UI 组件库 \nVueStar★169 - 带星星动画的vue点赞按钮 \nvue-mugen-scroll★167 - 无限滚动组件 \nmint-loadmore★167 - VueJS的双向下拉刷新组件 \nvue-tables-2★162 - 显示数据的bootstrap样式网格 \nvue-virtual-scroller★158 - 带任意数目数据的顺畅的滚动 \nDataVisualization★149 - 数据可视化 \nvue-quill-editor★149 - 基于Quill适用于Vue2的富文本编辑器 \nVueditor★138 - 所见即所得的编辑器 \nvue-html5-editor★132 - html5所见即所得编辑器 \nvue-msgbox★127 - vuejs的消息框 \nvue-slider★126 - vue 滑动组件 \nvue-core-image-upload★124 - 轻量级的vue上传插件 \nvue-slide★121 - vue轻量级滑动组件 \nvue-lazyload-img★118 - 移动优化的vue图片懒加载插件 \nvue-drag-and-drop-list★114 - 创建排序列表的Vue指令 \nvue-progressive-image★107 - Vue的渐进图像加载插件 \nvuwe★107 - 基于微信WeUI所开发的专用于Vue2的组件库 \nvue-dropzone★105 - 用于文件上传的Vue组件 \nvue-charts★101 - 轻松渲染一个图表 \nvue-swiper★95 - 易于使用的滑块组件 \nvue-images★93 - 显示一组图片的lightbox组件 \nvue-carousel-3d★91 - VueJS的3D轮播组件 \nvue-region-picker★89 - 选择中国的省份市和地区 \nvue-typer★89 - 模拟用户输入选择和删除文本的Vue组件 \nvue-impression★88 - 移动Vuejs2 UI元素 \nvue-datatable★87 - 使用Vuejs创建的DataTableView \nvue-instant★86 - 轻松创建自动提示的自定义搜索控件 \nvue-dragging★86 - 使元素可以拖拽 \nvue-slider-component★85 - 在vue1和vue2中使用滑块 \nvue2-loading-bar★76 - 最简单的仿Youtube加载条视图 \nvue-datepicker★75 - 漂亮的Vue日期选择器组件 \nvue-video★70 - Vue.js的HTML5视频播放器 \nvue-toast-mobile★68 - VueJS的toast插件 \nvue-image-crop-upload★67 - vue图片剪裁上传组件 \nvue-tooltip★66 - 带绑定信息提示的提示工具 \nvue-highcharts★66 - HighCharts组件 \nvue-touch-ripple★62 - vuejs的触摸ripple组件 \ncoffeebreak★61 - 实时编辑CSS组件工具 \nvue-datasource★60 - 创建VueJS动态表格 \nvue2-timepicker★60 - 下拉时间选择器 \nvue-date-picker★59 - VueJS日期选择器组件 \nvue-scrollbar★58 - 最简单的滚动区域组件 \nvue-quill★56 - vue组件构建quill编辑器 \nvue-google-signin-button★55 - 导入谷歌登录按钮 \nvue-svgicon★53 - 创建svg图标组件的工具 \nvue-float-label★49 - VueJS浮动标签模式 \nvue-baidu-map★46 - 基于 Vue 2的百度地图组件库 \nvue-social-sharing★45 - 社交分享组件 \nvue2-editor★44 - HTML编辑器 \nvue-tagsinput★41 - 基于VueJS的标签组件 \nvue-easy-slider★41 - Vue 2.x的滑块组件 \ndatepicker★38 - 基于flatpickr的时间选择组件 \nvue-chart★37 - 强大的高速的vue图表解析 \nvue-music-master★37 - vue手机端网页音乐播放器 \nhandsontable★35 - 网页表格组件 \nvue-simplemde★35 - VueJS的Markdown编辑器组件 \nvue-popup-mixin★35 - 用于管理弹出框的遮盖层 \ncubeex★33 - 包含一套完整的移动UI \nvue-fullcalendar★32 - vue FullCalendar封装 \nvue-material-design★32 - Vue MD风格组件 \nvue-morris★31 - Vuejs组件封装Morrisjs库 \nwe-vue★30 - Vue2及weui1开发的组件 \nvue-image-clip★29 - 基于vue的图像剪辑组件 \nvue-bootstrap-table★29 - 可排序可检索的表格 \nvue-radial-progress★28 - Vue.js放射性进度条组件 \nvue-slick★28 - 实现流畅轮播框的vue组件 \nvue-pull-to-refresh★27 - Vue2的上拉下拉 \nvue-form-2★26 - 全面的HTML表单管理的解决方案 \nvue-side-nav★26 - 响应式的侧边导航 \nmint-indicator★26 - VueJS移动加载指示器插件 \nchartjs★24 - Vue Bulma的chartjs组件 \nvue-scroll★24 - vue滚动 \nvue-ripple★24 - 制作谷歌MD风格涟漪效果的Vue组件 \nvue-touch-keyboard★22 - VueJS虚拟键盘组件 \nvue-chartkick★22 - VueJS一行代码实现优美图表 \nvue-ztree★21 - 用 vue 写的树层级组件 \nvue-m-carousel★20 - vue 移动端轮播组件 \nvue-datepicker-simple★20 - 基于vue的日期选择器 \nvue-tabs★20 - 多tab页轻型框架 \nvue-verify-pop★19 - 带气泡提示的vue校验插件 \nvue-parallax★15 - 整洁的视觉效果 \nvue-img-loader★14 - 图片加载UI组件 \nvue-typewriter★13 - vue组件类型 \nvue-smoothscroll★12 - smoothscroll的VueJS版本 \nvue-city★10 - 城市选择器 \nvue-tree★10 - vue树视图组件 \nvue-ios-alertview★8 - iOS7+ 风格的alertview服务 \ndd-vue-component★7 - 订单来了的公共组件库 \npaco-ui-vue★7 - PACOUI的vue组件 \nvue-cmap★5 - Vue China map可视化组件 \nvue-button★4 - Vue按钮组件\n\n开发框架\n\nvue.js★45466 - 流行的轻量高效的前端组件化方案 \nvue-admin★3222 - Vue管理面板框架 \nelectron-vue★1273 - Electron及VueJS快速启动样板 \nvue-2.0-boilerplate★241 - Vue2单页应用样板 \nvue-spa-template★223 - 前后端分离后的单页应用开发 \nFramework7-Vue★210 - VueJS与Framework7结合 \nvue-bulma★132 - 轻量级高性能MVVM Admin UI框架 \nvue-webgulp★100 - 仿VueJS Vue loader示例 \nvue-element-starter★34 - vue启动页\n\n实用库\n\nvuex★5997 - 专为 Vue.js 应用程序开发的状态管理模式 \nvuelidate★750 - 简单轻量级的基于模块的Vue.js验证 \nqingcheng★677 - qingcheng主题 \nvue-desktop★461 - 创建管理面板网站的UI库 \nvue-meta★257 - 管理app的meta信息 \nvue-axios★209 - 将axios整合到VueJS的封装 \nvue-svg-icon★116 - vue2的可变彩色svg图标方案 \navoriaz★110 - VueJS测试实用工具库 \nvue-framework7★83 - 结合VueJS使用的Framework7组件 \nvue-bootstrap-modal★78 - vue的Bootstrap样式组件 \nvuep★72 - 用实时编辑和预览来渲染Vue组件 \nvue-online★67 - reactive的在线和离线组件 \nvue-lazy-render★66 - 用于Vue组件的延迟渲染 \nvue-password-strength-meter★65 - 交互式密码强度计 \nelement-admin★57 - 支持 vuecli 的 Element UI 的后台模板 \nvue-electron★55 - 将选择的API封装到Vue对象中的插件 \ncleave★55 - 基于cleave.js的Cleave组件 \nvue-events★54 - 简化事件的VueJS插件 \nvue-shortkey★53 - 应用于Vue.js的Vue-ShortKey 插件 \nvue-cordova★50 - Cordova的VueJS插件 \nvue-router-transition★49 - 页面过渡插件 \nvue-gesture★48 - VueJS的手势事件插件 \nhttp-vue-loader★46 - 从html及js环境加载vue文件 \nvue-qart★46 - 用于qartjs的Vue2指令 \nvuemit★44 - 处理VueJS事件 \nvue-websocket★42 - VueJS的Websocket插件 \nvue-local-storage★41 - 具有类型支持的Vuejs本地储存插件 \nlazy-vue★41 - 懒加载图片 \nvue-bus★36 - VueJS的事件总线 \nvue-reactive-storage★35 - vue插件的Reactive层 \nvue-notifications★32 - 非阻塞通知库 \nvue-lazy-component★32 - 懒加载组件或者元素的Vue指令 \nv-media-query★32 - vue中添加用于配合媒体查询的方法 \nvue-observe-visibility★31 - 当元素在页面上可见或隐藏时检测 \nvue-ts-loader★29 - 在Vue装载机检查脚本 \nvue-pagination-2★28 - 简单通用的分页组件 \nvuex-i18n★26 - 定位插件 \nVue.resize★26 - 检测HTML调整大小事件的vue指令 \nvuex-shared-mutations★25 - 分享某种Vuex mutations \nvue-file-base64★16 - 将文件转换为Base64的vue组件 \nmodal★15 - Vue Bulma的modal组件 \nFamous-Vue★15 - Famous库的vue组件 \nleo-vue-validator★13 - 异步的表单验证组件 \nVue-Easy-Validator★11 - 简单的表单验证 \nvue-truncate-filter★9 - 截断字符串的VueJS过滤器 \nvue-zoombox★9 - 一个高级zoombox \nvue-input-autosize★5 - 基于内容自动调整文本输入的大小 \nvue-lazyloadImg★3 - 图片懒加载插件\n\n服务端\n\nnuxt.js★2743 - 用于服务器渲染Vue app的最小化框架 \nexpress-vue★137 - 简单的使用服务器端渲染vue.js \nvue-ssr★67 - 非常简单的VueJS服务器端渲染模板 \nvue-ssr★56 - 结合Express使用Vue2服务端渲染 \nvue-easy-renderer★22 - Nodejs服务端渲染\n\n辅助工具\n\nDejaVue★543 - Vuejs可视化及压力测试 \nvue-play★445 - 展示Vue组件的最小化框架 \nvscode-VueHelper★185 - 目前vscode最好的vue代码提示插件 \nvue-generate-component★39 - 轻松生成Vue js组件的CLI工具 \nvue-multipage-cli★33 - 简单的多页CLI \nVuejsStarterKit★26 - vuejs starter套件\n\n应用实例\n\nkoel★7175 - 基于网络的个人音频流媒体服务 \npagekit★4021 - 轻量级的CMS建站系统 \nvuedo★1040 - 博客平台 \njackblog-vue★943 - 个人博客系统 \nvue-cnode★597 - 重写vue版cnode社区 \nCMS-of-Blog★405 - 博客内容管理器 \nrss-reader★326 - 简单的rss阅读器 \nvue-ghpages-blog★208 - 依赖GitHub Pages无需本地生成的静态博客 \nswoole-vue-webim★97 - Web版的聊天应用 \nvue-dashing-js★70 - nuvo-dashing-js的fork \nfewords★52 - 功能极其简单的笔记本 \nvue-blog★33 - 使用Vue2.0 和Vuex的vue-blog\n\nDemo示例\n\nVue-cnodejs★2113 - 基于vue重写Cnodejs.org的webapp \nNeteaseCloudWebApp★1154 - 高仿网易云音乐的webapp \nvue-zhihu-daily★875 - 知乎日报 with Vuejs \nvue-wechat★732 - vue.js开发微信app界面 \nvue2-demo★699 - 从零构建vue2 + vue-router + vuex 开发环境 \neleme★612 - 高仿饿了么app商家详情 \nvue-demo★575 - vue简易留言板 \nmaizuo★498 - vue/vuex/redux仿卖座网 \nspa-starter-kit★489 - 单页应用启动套件 \nvue-music★485 - Vue 音乐搜索播放 \ndouban★402 - 模仿豆瓣前端 \nvue-Meizi★394 - vue最新实战项目 \nzhihudaily-vue★386 - 知乎日报web版 \nvue-demo-kugou★310 - vuejs仿写酷狗音乐webapp \nVueDemo_Sell_Eleme★307 - Vue2高仿饿了么外卖平台 \nvue2.0-taopiaopiao★246 - vue2.0与express构建淘票票页面 \nvue-leancloud-blog★239 - 一个前后端完全分离的单页应用 \nnode-vue-server-webpack★239 - Node.js+Vue.js+webpack快速开发框架 \nmi-by-vue★222 - VueJS仿小米官网 \nvue-fis3★199 - 流行开源工具集成demo \nvue2.x-douban★188 - Vue2实现简易豆瓣电影webApp \nvue-demo-maizuo★188 - 使用Vue2全家桶仿制卖座电影 \nvue-zhihudaily★169 - 知乎日报 Web 版本 \nvue-adminLte-vue-router★162 - vue和adminLte整合应用 \nvue-axios-github★157 - 登录拦截登出功能 \nZhihu-Daily-Vue.js★134 - Vuejs单页网页应用 \nhello-vue-django★113 - 使用带有Django的vuejs的样板项目 \nvue-cnode★101 - vue单页应用demo \nx-blog★100 - 开源的个人blog项目 \nvue-express-mongodb★96 - 简单的前后端分离案例 \nwebsocket_chat★91 - 基于vue和websocket的多人在线聊天室 \nphotoShare★85 - 基于图片分享的社交平台 \nvue-zhihudaily-2.0★81 - 使用Vue2.0+vue-router+vuex创建的zhihudaily \nnotepad★77 - 本地存储的记事本 \nvueBlog★75 - 前后端分离博客 \nvue-ruby-china★70 - VueJS框架搭建的rubychina平台 \nZhihu_Daily★70 - 基于Vue和Nodejs的Web单页应用 \nvue-koa-demo★60 - 使用Vue2和Koa1的全栈demo \nvue2.x-Cnode★50 - 基于vue全家桶的Cnode社区 \nlife-app-vue★49 - 使用vue2完成多功能集合到小webapp \ngithub-explorer★49 - 寻找最有趣的GitHub库 \nvue-trip★48 - vue2做的出行webapp \nvue-ssr-boilerplate★47 - 精简版的ofvue-hackernews-2 \nvue-bushishiren★45 - 不是诗人应用 \nhoutai★44 - 基于vue和Element的后台管理系统 \nios7-vue★38 - 使用vue2.0 vue-router vuex模拟ios7 \nFramework7-VueJS★38 - 使用移动框架的示例 \ncnode-vue★37 - 基于vue和vue-router构建的cnodejs web网站SPA \nvue-cli-multipage-bootstrap★36 - 将vue官方在线示例整合到组件中 \nvue-cnode★34 - 用 Vue 做的 CNode 官网 \nHyaReader★30 - 移动友好的阅读器 \nzhihu-daily★28 - 轻松查看知乎日报内容 \nseeMusic★27 - 跨平台云音乐播放器 \nvue-cnode★22 - 使用cNode社区提供的接口 \nzhihu-daily-vue★20 - 知乎日报 \nsls-vuex2-demo★20 - vuex2商城购物车demo \nvue-dropload★17 - 用以测试下拉加载与简单路由 \nvue-cnode-mobile★17 - 搭建cnode社区 \nVuejs-SalePlatform★17 - vuejs搭建的售卖平台demo \nv-notes★17 - 简单美观的记事本 \nvue-starter★16 - VueJs项目的简单启动页 \nvue-memo★7 - 用 vue写的记事本应用\n\n\n\n\n","slug":"vuedemo","date":"2021-09-22T01:40:23.000Z","categories_index":"","tags_index":"vue,前端,资料分享","author_index":"Markcwg"},{"id":"59dcc17eb5b8caada16842d2dea2b4e8","title":"SpringBoot 中的参数校验","content":"0 写在前面接口开发中，参数的校验与过滤是一门必修课，刚入门的新人一般会写一堆 if 来判断参数是否合法，但是这种方式太过笨重，且重复代码太多。这里分享一下使用 Validator 框架进行参数校验，有效减少代码量，提高开发效率。\n1 前置准备\n\n\n\n\n\n\n\n\n使用 Validator 框架进行参数校验，需要熟悉 SpringBoot 框架的基本使用，了解前后端分离开发模式下的 web 接口工作原理。\n2 环境准备\n创建一个 SpringBoot 项目\n\n\n引入 validation 依赖\n\n\n\n\n\n\n\n\n\n在 springboot:2.3 之前，validation 默认集成在 web-starter 中，在 2.3 版本之后独立为单独的一个 starter，需要单独引入\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-validation&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;\n\n3 常用的注解\n\n\n注解\n校验作用\n\n\n\n@Null\n值必须为空\n\n\n@NotNull\n值不能为空\n\n\n@Pattern(regex=)\n字符串必须匹配正则表达式 regex\n\n\n@Size(min, max)\n集合元素的数量必须在 min 和 max 之间\n\n\n@CreditCardNumber(ignoreNonDigitCharacters=)\n字符串必须是信用卡号，按照美国的标准校验\n\n\n@Email\n字符串必须是 Email 地址\n\n\n@Length(min, max)\n检查字符串的长度\n\n\n@NotBlank\n字符串不能为空串\n\n\n@NotEmpty\n字符串不能为 null，必须有元素\n\n\n@Range(min, max)\n数字必须大于 min，小于 max\n\n\n@SafeHtml\n字符串必须是安全的 html\n\n\n@URL\n字符串必须是合法的 URL\n\n\n@AssertFalse\n值必须是 false\n\n\n@AssertTrue\n值必须是 true\n\n\n@DecimalMax(value=, inclusive=)\n值必须小于等于(inclusive=true)或小于(inclusive=false)属性指定的值 value，也可以注释在字符串类型的属性上\n\n\n@DecimalMin(value=, inclusive=)\n值必须大于等于(inclusive=true)或大于(inclusive=false)属性指定的值 value，也可以注释在字符串类型的属性上\n\n\n@Digist(integer=, fraction=)\n数字格式检查，integer 指定整数部分的最大长度，fraction 指定小数部分的最大长度\n\n\n@Future\n时间必须是未来的\n\n\n@Past\n时间必须是过去的\n\n\n@Max(value=)\n值必须小于等于 value 指定的值。不能用在字符串类型属性上\n\n\n@Min(value=)\n值必须大于等于 value 指定的值。不能用在字符串类属性上\n\n\n4 实战测试4.1 定义用于校验的实体类&#x2F;**\n * @author markcwg\n * @date 2021&#x2F;8&#x2F;14 4:03 下午\n *&#x2F;\n@Data\npublic class User &#123;\n    @NotBlank(message &#x3D; &quot;用户的名字不可为空&quot;)\n    private String name;\n\n    @Email(message &#x3D; &quot;邮箱地址不正确&quot;)\n    private String email;\n\n    @Min(value &#x3D; 18L, message &#x3D; &quot;本网站拒绝未成年人访问&quot;)\n    private int age;\n\n    @Length(min &#x3D; 18, max &#x3D; 18, message &#x3D; &quot;本接口要求,身份证号的长度是 18&quot;)\n    private String card;\n\n    @Pattern(regexp &#x3D; &quot;.*word.*&quot;)\n    private String word;\n&#125;\n\n4.2 定义用于校验的controller\n\n\n\n\n\n\n\n\n注意：使用单参数校验时，必须在类上标注Validated注解\n&#x2F;**\n * @author markcwg\n * @date 2021&#x2F;8&#x2F;14 4:17 下午\n *&#x2F;\n@RestController\n@Validated\n@Slf4j\n@RequestMapping(&quot;valid&quot;)\npublic class ValidController &#123;\n\n    @PostMapping(&quot;&#x2F;body&quot;)\n    public String body(@Validated @RequestBody User user) &#123;\n        log.info(&quot;user &#x3D;&#x3D;&#x3D;&gt; &quot; + user);\n        return &quot;body success&quot;;\n    &#125;\n\n    @PostMapping(&quot;&#x2F;form&quot;)\n    public String form(@Validated User user) &#123;\n        log.info(&quot;user &#x3D;&#x3D;&#x3D;&gt; &quot; + user);\n        return &quot;form success&quot;;\n    &#125;\n\n    @PostMapping(&quot;param&quot;)\n    public String param(@Email String email) &#123;\n        log.info(&quot;email is &#123;&#125;&quot;, email);\n        return &quot;email success&quot;;\n    &#125;\n&#125;\n\n4.3 访问接口测试校验结果\n\n\n\n\n\n\n\n\n利用 idea 自带的 http 测试\n\n\n测试 body 参数校验结果\n\n\n测试 form 参数校验结果\n\n\n测试单参数校验结果\n\n\n\n","slug":"validation","date":"2021-08-14T02:43:56.000Z","categories_index":"技术分享","tags_index":"后端开发,Java,SpringBoot,参数校验,validation","author_index":"Markcwg"},{"id":"9d50f94d4a9efb5a9cc3d3cd84019029","title":"封装一个自己的 starter","content":"0 写在前面SpringBoot 中有一个非常重要的机制——starter，它是遵循“约定大于配置”理念的一个重要表现。能够将功能集成进 starter 中，无需繁杂的配置（可以认为特指一大堆 xml 文件）即可在 maven 项目中引入并使用。日常开发中，经常会遇到一些独立于业务之外的通用模块（例如日志处理、redis 工具等），秉承着不重复造轮子的理念，我们可以考虑将类似的模块封装成一个 starter，按需引入，利用 SpringBoot 的自动装配将 Bean 注册进 IOC 容器中。\n1 前置知识封装一个 starter 并不适合零基础的小白。在了解如何封装一个 starter 之前，至少需要了解的前置知识如下：\n\nSpringBoot 的基础使用（如创建项目、编写配置文件以及配置类等）\n如果能了解SpringBoot 的自动装配原理更好，不了解也没关系，不影响本 demo 的学习\n了解Redis 的基础使用（其实这个也不强求，只是因为本 demo 选择做的是一个 redis 的工具类一样的 starter，所以最好还是有一点基础）\nmaven 的基础知识，至少要了解本地仓库跟远程仓库这些概念。\n了解自定义注解\n已安装 redis\n\n2 开始编写 starter\n创建一个maven 项目\n\n\n引入 springboot 父依赖\n&lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;2.5.3&lt;&#x2F;version&gt;\n        &lt;relativePath&#x2F;&gt;\n&lt;&#x2F;parent&gt;\n引入 redis 相关依赖\n&lt;properties&gt;\n        &lt;maven.compiler.source&gt;8&lt;&#x2F;maven.compiler.source&gt;\n        &lt;maven.compiler.target&gt;8&lt;&#x2F;maven.compiler.target&gt;\n        &lt;spring.boot.version&gt;2.5.3&lt;&#x2F;spring.boot.version&gt;\n&lt;&#x2F;properties&gt;\n\n&lt;dependencies&gt;\n        &lt;!-- 添加 redis 依赖 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;$&#123;spring.boot.version&#125;&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.data&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-data-redis&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;$&#123;spring.boot.version&#125;&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;\n创建基础包结构  \n\n\n\n\n在 config 包下创建 RedisTemplateConfig 类\npackage com.study.redis.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n&#x2F;**\n * @author markcwg\n * @date 2021&#x2F;8&#x2F;10 3:48 下午\n *&#x2F;\n@Configuration\npublic class RedisTemplateConfig &#123;\n\n    @Bean\n    public RedisTemplate&lt;String, String&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) &#123;\n        RedisTemplate&lt;String, String&gt; redisTemplate &#x3D; new RedisTemplate&lt;&gt;();\n        redisTemplate.setConnectionFactory(redisConnectionFactory);\n        &#x2F;&#x2F;定义key序列化方式\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        &#x2F;&#x2F;定义value序列化方式\n        redisTemplate.setValueSerializer(new GenericJackson2JsonRedisSerializer());\n        return redisTemplate;\n    &#125;\n&#125;\n在 helper 包下创建 RedisHelper 类\npackage com.study.redis.helper;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Set;\n\n&#x2F;**\n * @author markcwg\n * @date 2021&#x2F;8&#x2F;10 3:53 下午\n *&#x2F;\n@Component\npublic class RedisHelper &#123;\n    @Autowired\n    private RedisTemplate&lt;String, String&gt; redisTemplate;\n\n    &#x2F;**\n     * 是否存在key\n     *\n     * @param key 键\n     * @return 是否存在\n     *&#x2F;\n    public Boolean hasKey(String key) &#123;\n        return redisTemplate.hasKey(key);\n    &#125;\n\n    &#x2F;**\n     * 查找匹配的key\n     *\n     * @param pattern 匹配表达式\n     * @return 所有匹配的数据\n     *&#x2F;\n    public Set&lt;String&gt; keys(String pattern) &#123;\n        return redisTemplate.keys(pattern);\n    &#125;\n\n    &#x2F;**\n     * 设置指定 key 的值\n     * @param key 键\n     * @param value 值\n     *&#x2F;\n    public void set(String key, String value) &#123;\n        redisTemplate.opsForValue().set(key, value);\n    &#125;\n\n    &#x2F;**\n     * 获取指定 key 的值\n     * @param key 键\n     * @return 值\n     *&#x2F;\n    public String get(String key) &#123;\n        return redisTemplate.opsForValue().get(key);\n    &#125;\n\n&#125;\n\n在 config 包下创建 CustomRedisAutoConfiguration\npackage com.study.redis.config;\n\nimport com.study.redis.helper.RedisHelper;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n&#x2F;**\n * @author markcwg\n * @date 2021&#x2F;7&#x2F;30 4:10 下午\n *&#x2F;\n@ConditionalOnWebApplication\n@Configuration(proxyBeanMethods &#x3D; false)\n@ComponentScan(basePackages &#x3D; &quot;com.study.redis.config&quot;)\npublic class CustomRedisAutoConfiguration &#123;\n    @Bean\n    public RedisHelper redisHelper() &#123;\n        return new RedisHelper();\n    &#125;\n&#125;\n在 annotations 包下创建 LoadRedis 注解\npackage com.study.redis.annotations;\n\nimport com.study.redis.config.CustomRedisAutoConfiguration;\nimport org.springframework.context.annotation.Import;\n\nimport java.lang.annotation.*;\n\n&#x2F;**\n * @author markcwg\n * @date 2021&#x2F;8&#x2F;10 4:00 下午\n *&#x2F;\n@Target(ElementType.TYPE)\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Import(CustomRedisAutoConfiguration.class)\npublic @interface LoadRedis &#123;\n&#125;\n使用 mvn install 将 starter 放入自己的 maven 仓库\n\n\n判断 maven 本地仓库是否已存在成品(此步可忽略)\n\n\n\n3 原理解释\n\n\n\n\n\n\n\n\n此处简单解释一下此 starter 的原理：通过 LoadRedis 注解引入 CustomRedisAutoConfiguration 自动配置类，在这个类中将 RedisHelper 注册进 IOC 容器，而 RedisHelper 里封装了常用的 redis 方法，可自行扩展\n4 使用自定义的 starter\n创建一个新的springboot 项目\n\n\n引入自定义的 starter\n&lt;dependency&gt;\n            &lt;groupId&gt;com.study&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;starter-demo&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;0.1&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n编写配置文件(此步要求已安装 redis)\nserver:\n  port: 8082\n\nspring:\n  redis:\n    host: 127.0.0.1\n    port: 6379\n在启动类上加上 LoadRedis 注解\n@SpringBootApplication\n@LoadRedis\npublic class StarterTestDemoApplication &#123;\n\n    public static void main(String[] args) &#123;\n        SpringApplication.run(StarterTestDemoApplication.class, args);\n    &#125;\n\n&#125;\n创建一个 RedisController 类用作测试\n\n\n\n\n\n\n\n\n\n由于只用作测试，此处直接在 Controller 里直接写业务逻辑\npackage com.example.startertestdemo.com.study;\n\nimport com.study.redis.helper.RedisHelper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n&#x2F;**\n * @author markcwg\n * @date 2021&#x2F;8&#x2F;10 4:19 下午\n *&#x2F;\n@RestController\n@RequestMapping(&quot;redis&quot;)\npublic class RedisController &#123;\n\n    private RedisHelper redisHelper;\n    @Autowired\n    public RedisController(RedisHelper redisHelper) &#123;\n        this.redisHelper &#x3D; redisHelper;\n    &#125;\n\n    @PostMapping\n    public String save(String key, String value) &#123;\n        redisHelper.set(key, value);\n        return &quot;success&quot;;\n    &#125;\n\n    @GetMapping\n    public String get(String key) &#123;\n        return redisHelper.get(key);\n    &#125;\n&#125;\n\n使用 postman 测试向 redis 中发送数据\n\n\n使用 postman 测试从 redis 中获取数据\n\n\n\n5 完结，撒花！\n\n\n\n\n\n\n\n\n保持学习，保持热爱！\n","slug":"starter-demo","date":"2021-08-10T07:04:34.000Z","categories_index":"技术分享","tags_index":"SpringBoot,Redis,注解,AOP,Aspect","author_index":"Markcwg"},{"id":"9fb587e25ed7cfd4953027b4989f29b2","title":"FastDFS 搭建笔记","content":"1 安装 Tracker\n\n\n\n\n\n\n\n\n注：在编辑配置文件的过程中，ip 需写服务器外网 ip，亲测写 127.0.0.1 会报错\n#一个环境\nyum install gcc-c++\n\n#两个库，第一个 libevent\nyum -y install libevent\n# 安装第二个库 libfastcommon\ncd &#x2F;usr&#x2F;local\nwget https:&#x2F;&#x2F;github.com&#x2F;happyfish100&#x2F;libfastcommon&#x2F;archive&#x2F;V1.0.43.tar.gz\ntar -zxvf V1.0.43.tar.gz\n.&#x2F;make.sh\n.&#x2F;make.sh install\n\n#一个安装包 tracker\ncd &#x2F;usr&#x2F;local\nwget https:&#x2F;&#x2F;github.com&#x2F;happyfish100&#x2F;fastdfs&#x2F;archive&#x2F;V6.06.tar.gz\ntar -zxvf V6.06.tar.gz\ncd fastdfs-6.06&#x2F;\n.&#x2F;make.sh\n.&#x2F;make.sh install\n#安装成功后将安装目录内 conf 目录下的配置文件拷贝到 &#x2F;etc&#x2F;fdfs 目录下\ncd conf&#x2F;\ncp .&#x2F;* &#x2F;etc&#x2F;fdfs&#x2F;\n\n#进入 &#x2F;etc&#x2F;fdfs 下修改配置\ncd &#x2F;etc&#x2F;fdfs\nvi tracker.conf\n#启动 tracker\n&#x2F;usr&#x2F;bin&#x2F;fdfs_trackerd &#x2F;etc&#x2F;fdfs&#x2F;tracker.conf start\n\n\n2 安装 Storage\n\n\n\n\n\n\n\n\nStorage 同样依赖 libevent 和 libfastcommon 这两个库，在同一台机器上，安装了 Tracker 时相当于已经安装了 Storage，只是需要配置 Storage\n# 进入&#x2F;etc&#x2F;fdfs 配置 Storage\n# 配置完成后，启动\n&#x2F;usr&#x2F;bin&#x2F;fdfs_storaged &#x2F;etc&#x2F;fdfs&#x2F;storage.conf start\n\n3 安装 Nginx\n\n\n\n\n\n\n\n\nNginx 可以算是 FasfDFS 的重要搭档\n步骤分为两步\n\n安装 nginx\n首先在 Storage 下安装 fasfdfs-nginx-module\n\n\n安装 nginx\n\ncd &#x2F;usr&#x2F;local\nwget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.17.0.tat.gz\ntar -zxvf nginx-1.17.0.tat.gz\nyum -y install pcre-devel\nyum -y install openssl openssl-devel\n\n#解压完成后进入安装目录开始编译安装\ncd nginx-1.17.0\n.&#x2F;configure\nmake\nmake install\n\n#安装完成后，默认位置在 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx\ncd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin\n#启动 nginx\n.&#x2F;nginx\n# 如果修改了配置文件，即可通过以下命令重新加载\n.&#x2F;nginx -s reload\n\n\n安装 fastdfs-nginx-module\n\n# cd &#x2F;usr&#x2F;local\nwget https:&#x2F;&#x2F;github.com&#x2F;happyfish100&#x2F;fastdfs-nginx-module&#x2F;archive&#x2F;V1.22.tar.gz\ntar -zxvf V1.22.tar.gz\n#将&#x2F;usr&#x2F;local&#x2F;fastdfs-nginx-module-1.22&#x2F;src&#x2F;mod_fastdfs.conf 文件拷贝到 &#x2F;etc&#x2F;fdfs&#x2F; 目录下，并修改内容\ncd &#x2F;fastdfs-nginx-module-1.22&#x2F;src&#x2F;\ncp mod_fastdfs.conf &#x2F;etc&#x2F;fdfs\n\n# 进入到nginx 解压目录\ncd &#x2F;usr&#x2F;local&#x2F;nginx-1.17.0\n.&#x2F;configure --add-module&#x3D;&#x2F;usr&#x2F;local&#x2F;fastdfs-nginx-module-1.22&#x2F;src\nmake\nmake install\n\n#然后按照下图红线修改 nginx 配置文件\nvi &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf\n# 修改完成后重新启动或加载 nginx\n.&#x2F;nginx -s reload\n\n\n\n4 Java 客户端测试\n创建一个 maven 工程，在 pom 中引入相关依赖\n\n&lt;dependency&gt;\n    &lt;groupId&gt;net.oschina.zcx7878&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;fastdfs-client-java&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.27.0.0&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n\n\n在 resources 下新建 fastdfs 的配置文件\n\nfastdfs.connect_timeout_in_seconds&#x3D;5\nfastdfs.network_timeout_in_seconds&#x3D;30\nfastdfs.charset&#x3D;UTF-8\nfastdfs.http_anti_steal_token&#x3D;false\nfastdfs.http_secret_key&#x3D;FastDFS1234567890\nfastdfs.http_tracker_http_port&#x3D;80\nfastdfs.tracker_servers&#x3D;IP:PORT\nfastdfs.connection_pool.enabled&#x3D;true\nfastdfs.connection_pool.max_count_per_entry&#x3D;500\nfastdfs.connection_pool.max_idle_time&#x3D;3600\nfastdfs.connection_pool.max_wait_time_in_ms&#x3D;1000\n\n\n编写上传测试案例 \n\n\n\n\n\n\n\n\n\n\n注：NameValuePair为org.csource.common.NameValuePair，log 是 lombok 插件提供的，在类上使用@Slf4j 注解\n@Test\n    public void testUpload() &#123;\n        try &#123;\n            ClientGlobal.initByProperties(&quot;fastdfs-client.properties&quot;);\n            TrackerClient tracker &#x3D; new TrackerClient();\n            TrackerServer trackerServer &#x3D; tracker.getConnection();\n            StorageServer storageServer &#x3D; null;\n            StorageClient1 client &#x3D; new StorageClient1(trackerServer, storageServer);\n            NameValuePair[] nvp &#x3D; null;\n            &#x2F;&#x2F;上传到文件系统\n            String fileId &#x3D; client.upload_file1(&quot;&#x2F;Users&#x2F;markcwg&#x2F;Pictures&#x2F;background9.jpg&quot;, &quot;jpg&quot;, nvp);\n            log.info(fileId);\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n\n&#x2F;&#x2F;测试结果\n16:02:41.099 [main] INFO com.study.springbootdemo.FastDfsTest - group1&#x2F;M00&#x2F;00&#x2F;00&#x2F;ecSfkGEM7KGAJwAHABGW7rUy8jQ119.jpg\n  \n\n\n\n编写下载案例\n\n@Test\n    public void testDownload() &#123;\n        try &#123;\n            ClientGlobal.initByProperties(&quot;fastdfs-client.properties&quot;);\n            TrackerClient tracker &#x3D; new TrackerClient();\n            TrackerServer trackerServer &#x3D; tracker.getConnection();\n            StorageServer storageServer &#x3D; null;\n            StorageClient1 client &#x3D; new StorageClient1(trackerServer, storageServer);\n            byte[] bytes &#x3D; client.download_file1(&quot;group1&#x2F;M00&#x2F;00&#x2F;00&#x2F;ecSfkGEM7KGAJwAHABGW7rUy8jQ119.jpg&quot;);\n            FileOutputStream fos &#x3D; new FileOutputStream(new File(&quot;&#x2F;Users&#x2F;markcwg&#x2F;Desktop&#x2F;666.jpg&quot;));\n            fos.write(bytes);\n            fos.close();\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n\n","slug":"fastfs","date":"2021-08-06T02:44:12.000Z","categories_index":"学习笔记","tags_index":"分布式文件系统,FastDFS,linux","author_index":"Markcwg"},{"id":"98a1249129d8635543c07e96d38d4ad9","title":"Java 多线程基础","content":"1.创建线程的方式1.1.继承 Thread 类\n\n\n\n\n\n\n\n\n通过继承 Thread 类并重写 run 方法可以创建一个新的线程\npublic class Thread1 &#123;\n    public static void main(String[] args) &#123;\n        new MyThread1().start();\n    &#125;\n&#125;\n\nclass MyThread1 extends Thread&#123;\n    @Override\n    public void run() &#123;\n        System.out.println(&quot;我是通过继承 Thread 类创建的线程:&quot; + Thread.currentThread().getName());\n    &#125;\n&#125;\n\n\n\n\n\n\n\n\n\n运行结果  \n我是通过继承 Thread 类创建的线程:Thread-0\n1.2.实现 Runnable 接口\n\n\n\n\n\n\n\n\n通过实现 Runnable 接口并重写 run 方法可以创建一个新的线程\npublic class Thread2 &#123;\n    public static void main(String[] args) &#123;\n        new Thread(new MyThread2(), &quot;自定义线程名&quot;).start();\n    &#125;\n&#125;\n\nclass MyThread2 implements Runnable &#123;\n    @Override\n    public void run() &#123;\n        System.out.println(&quot;我是通过实现 Runnable 接口创建的线程:&quot; + Thread.currentThread().getName());\n    &#125;\n&#125;\n\n\n\n\n\n\n\n\n\n运行结果\n我是通过实现 Runnable 接口创建的线程:自定义线程名\n1.3.实现 Callable 接口\n\n\n\n\n\n\n\n\n通过实现 Callable 接口可以创建带返回值的线程\npublic class Thread3 &#123;\n    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;\n        ExecutorService es &#x3D; Executors.newSingleThreadExecutor();\n        Future&lt;String&gt; result &#x3D; es.submit(new MyThread3());\n        &#x2F;&#x2F;获取返回值\n        String val &#x3D; result.get();\n        System.out.println(val);\n        &#x2F;&#x2F;关闭资源\n        es.shutdown();\n    &#125;\n&#125;\n\nclass MyThread3 implements Callable&lt;String&gt; &#123;\n\n    @Override\n    public String call() throws Exception &#123;\n        System.out.println(&quot;当前线程为:&quot;+Thread.currentThread().getName());\n        return &quot;我是返回值&quot;;\n    &#125;\n&#125;\n\n\n\n\n\n\n\n\n\n运行结果\n当前线程为:pool-1-thread-1\n我是返回值\n2.线程中的常用方法2.1.sleep\n\n\n\n\n\n\n\n\nsleep 方法可以让当前线程休眠指定时长，其中参数 millis 为毫秒值，例如调用 sleep(1000)则线程休眠一秒\n&#x2F;**\n* Causes the currently executing thread to sleep (temporarily cease\n* execution) for the specified number of milliseconds, subject to\n* the precision and accuracy of system timers and schedulers. The thread\n* does not lose ownership of any monitors.\n*\n* @param  millis\n*         the length of time to sleep in milliseconds\n*\n* @throws  IllegalArgumentException\n*          if the value of &#123;@code millis&#125; is negative\n*\n* @throws  InterruptedException\n*          if any thread has interrupted the current thread. The\n*          &lt;i&gt;interrupted status&lt;&#x2F;i&gt; of the current thread is\n*          cleared when this exception is thrown.\n*&#x2F;\npublic static native void sleep(long millis) throws InterruptedException;\n\n\n小例子：使用 sleep 方法实现一个简单的倒计时\n\n&#x2F;**\n * 模拟倒计时\n * @author markcwg\n * @date 2021&#x2F;6&#x2F;10 11:42 下午\n *&#x2F;\npublic class TestSleep2 &#123;\n\n    public static void main(String[] args) &#123;\n        try &#123;\n            down();\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n\n    public static void down() throws Exception &#123;\n        int num &#x3D; 10;\n        while (num &gt;&#x3D; 0) &#123;\n            System.out.println(num);\n            Thread.sleep(1000);\n            num--;\n        &#125;\n    &#125;\n&#125;\n\n2.2.setPriority\n\n\n\n\n\n\n\n\nsetPriority方法可以设置线程的优先级，增加线程获取 CPU 的概率。但是优先级高的线程不一定比优先级低的线程先执行，具体还是看哪个线程获得 CPU \npublic final void setPriority(int newPriority) &#123;\n       ThreadGroup g;\n       checkAccess();\n       if (newPriority &gt; MAX_PRIORITY || newPriority &lt; MIN_PRIORITY) &#123;\n           throw new IllegalArgumentException();\n       &#125;\n       if((g &#x3D; getThreadGroup()) !&#x3D; null) &#123;\n           if (newPriority &gt; g.getMaxPriority()) &#123;\n               newPriority &#x3D; g.getMaxPriority();\n           &#125;\n           setPriority0(priority &#x3D; newPriority);\n       &#125;\n   &#125;\n\n2.3.yield\n\n\n\n\n\n\n\n\nyield 方法可以设置线程礼让，但是礼让也不一定成功，还是看 CPU的心情\n&#x2F;**\n * A hint to the scheduler that the current thread is willing to yield\n * its current use of a processor. The scheduler is free to ignore this\n * hint.\n *\n * &lt;p&gt; Yield is a heuristic attempt to improve relative progression\n * between threads that would otherwise over-utilise a CPU. Its use\n * should be combined with detailed profiling and benchmarking to\n * ensure that it actually has the desired effect.\n *\n * &lt;p&gt; It is rarely appropriate to use this method. It may be useful\n * for debugging or testing purposes, where it may help to reproduce\n * bugs due to race conditions. It may also be useful when designing\n * concurrency control constructs such as the ones in the\n * &#123;@link java.util.concurrent.locks&#125; package.\n *&#x2F;\npublic static native void yield();\n\n\n小例子：测试线程礼让\n\npublic class TestYield &#123;\n    public static void main(String[] args) throws Exception&#123;\n        MyYield myYield &#x3D; new MyYield();\n        new Thread(myYield, &quot;a&quot;).start();\n        Thread.sleep(100);\n        new Thread(myYield, &quot;b&quot;).start();\n        \n    &#125;\n&#125;\n\nclass MyYield implements Runnable &#123;\n    @Override\n    public void run() &#123;\n        System.out.println(Thread.currentThread().getName() + &quot;start....&quot;);\n        Thread.yield();\n\n        System.out.println(Thread.currentThread().getName() + &quot;end....&quot;);\n    &#125;\n&#125;\n\n2.4.join\n\n\n\n\n\n\n\n\njoin 方法使当前线程执行完毕之后再执行其他线程，可以想象成插队\npublic final synchronized void join(long millis)\n    throws InterruptedException &#123;\n        long base &#x3D; System.currentTimeMillis();\n        long now &#x3D; 0;\n\n        if (millis &lt; 0) &#123;\n            throw new IllegalArgumentException(&quot;timeout value is negative&quot;);\n        &#125;\n\n        if (millis &#x3D;&#x3D; 0) &#123;\n            while (isAlive()) &#123;\n                wait(0);\n            &#125;\n        &#125; else &#123;\n            while (isAlive()) &#123;\n                long delay &#x3D; millis - now;\n                if (delay &lt;&#x3D; 0) &#123;\n                    break;\n                &#125;\n                wait(delay);\n                now &#x3D; System.currentTimeMillis() - base;\n            &#125;\n        &#125;\n    &#125;\n\n\n小例子：测试 join 方法\n\npublic class TestConcurrent &#123;\n\n    public static void main(String[] args) &#123;\n        CopyOnWriteArrayList&lt;String&gt; list &#x3D; new CopyOnWriteArrayList&lt;String&gt;();\n        for (int i &#x3D; 0; i &lt; 10000; i++) &#123;\n            new Thread(() -&gt; &#123;\n                list.add(Thread.currentThread().getName());\n            &#125;).start();\n        &#125;\n\n        try &#123;\n            TimeUnit.SECONDS.sleep(2);\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n        System.out.println(list.size());\n    &#125;\n&#125;\n\n2.5.stop\n\n\n\n\n\n\n\n\nstop 方法可以停止一个线程，但是已经不推荐使用。更多的还是使用一个标志位来模拟线程停止\npublic class TestStop implements Runnable&#123;\n    private volatile boolean flag &#x3D; true;\n\n    @Override\n    public void run() &#123;\n        int i &#x3D; 0;\n        while (flag) &#123;\n            System.out.println(&quot;run ... Thread&quot; + i++);\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F;2.设置一个公开的方法停止线程,转换标志位\n    public void stop () &#123;\n        this.flag &#x3D; false;\n    &#125;\n\n    public static void main(String[] args) &#123;\n        TestStop stop &#x3D; new TestStop();\n        new Thread(stop).start();\n\n        for (int i &#x3D; 0; i &lt; 100; i++) &#123;\n            System.out.println(&quot;main :&quot; + i);\n            if (i &#x3D;&#x3D; 90) &#123;\n                &#x2F;&#x2F;调用线程停止方法,转换标志位,让线程停止\n                stop.stop();\n                System.out.println(&quot;线程停止了&quot;);\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\n","slug":"thread-base","date":"2021-06-13T01:55:46.000Z","categories_index":"学习笔记","tags_index":"Java,多线程,同步","author_index":"Markcwg"},{"id":"bff377c56f75fd38341893d71d7963aa","title":"Mac版Idea的快捷键","content":"1.Mac键盘符号\n⌘ == command\n\n⇧ == shift\n\n⇪ == caps lock \n\n⌥ == option\n\n⌃ == control\n\n⏎ == Enter/Return\n\n⌫ == 退格键\n\n⌦ == fn + ⌫ （相当于windows下的delete键）\n\n↑ == 上箭头\n\n↓ == 下箭头\n\n← == 左箭头\n\n→ == 右箭头\n\nFn+↑ == Page up\n\nFn+↓ == Page Down\n\nFn+← == Home\n\nFn+→ == End\n\n⇥ == Tab键\n\n⇤ == shift+Tab\n\n⎋ == esc\n\n\n2. Idea快捷键对照2.1. Ctrl键\n\n\nWin快捷键\nMac快捷键\n功能介绍\n\n\n\nCtrl + F\nCommand + F\n在当前文件中进行文本查找\n\n\nCtrl + R\nCommand + R\n在当前文件中进行文本替换\n\n\nCtrl + Z\nCommand + Z\n撤销\n\n\nCtrl + Y\nCommand + Delete\n删除光标所在行或删除选中行\n\n\nCtrl + D\nCommand + D\n复制光标所在行或复制选择内容，并把复制内容插入光标位置下面\n\n\nCtrl + W\nOption + ⬆️\n递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中基础上再扩展选中范围\n\n\nCtrl + E\nCommand + E\n现实最近打开的文件记录列表\n\n\nCtrl + N\nCommand + O\n根据输入的类名查找文件\n\n\nCtrl + J\nCommand + J\n插入自定义动态代码模版\n\n\nCtrl + P\nCommand + P\n方法参数提示显示\n\n\nCtrl + U\nCommand + U\n前往当前光标所在的方法的父类的方法/接口定义\n\n\nCtrl + B\nCommand + B\n进入光标所在的方法/变量的接口的定义处\n\n\nCtrl + /\nCommand + /\n注释光标所在行\n\n\nCtrl + F1\nCommand + F1\n在光标所在的错误代码处显示错误信息\n\n\nCtrl + F11\nOption + F3\n选中文件/文件夹，使用助记符设定/取消书签\n\n\nCtrl + Space\nControl + Space\n基础代码补全\n\n\nCtrl + Delete\nOption + fn + delete\n删除光标后面的单词或是中文句\n\n\nCtrl + BackSpace\nOption + delete\n删除光标前面的单词或是中文句\n\n\nCtrl + 1,2,3…9\nControl + 1,2,3…9\n定位到对应数值的书签位置\n\n\nCtrl + +\nCommand + +\n展开代码\n\n\nCtrl + -\nCommand + -\n折叠代码\n\n\nCtrl + 鼠标左键\nControl + 鼠标左键\n在打开的文件标题上弹出该文件路径\n\n\nCtrl + ⬅️\nOption + ⬅️\n光标跳转到当前单词/中文句的左侧开头位置\n\n\nCtrl + ➡️\nOption + ➡️\n光标跳转到当前单词/中文句的右侧开头位置\n\n\nCtrl + ⬆️\n无\n等效于鼠标滚轮向前\n\n\nCtrl + ⬇️\n无\n等效于鼠标滚轮向后\n\n\n2.2. Alt键\n\n\nWin 快捷键\nMac 快捷键\n功能介绍\n\n\n\nAlt + `\nControl + V\n显示版本控制常用操作菜单弹出层\n\n\nAlt + F1\nOption + F1\n显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择\n\n\nAlt + F7\nOption + F7\n查询所选对象/变量被引用\n\n\nAlt + Enter\nOption + Enter\nIntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同\n\n\nAlt + Insert\nCommand + N\n代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等\n\n\nAlt + 左方向键\nControl + 左方向键\n切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换\n\n\nAlt + 右方向键\nControl + 右方向键\n切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换\n\n\nAlt + 前方向键\nControl + 前方向键\n当前光标跳转到当前文件的前一个方法名位置\n\n\nAlt + 后方向键\nControl + 后方向键\n当前光标跳转到当前文件的后一个方法名位置\n\n\nAlt + 1,2,3…9\nCommand + 1,2,3…9\n显示对应数值的选项卡，其中 1 是 Project 用得最多\n\n\n2.3. Shift键\n\n\nWin 快捷键\nMac 快捷键\n功能介绍\n\n\n\nShift + F11\nCommand + F3\n弹出书签显示层\n\n\nShift + Tab\nShift + Tab\n取消缩进\n\n\nShift + Enter\nShift + Enter\n开始新一行。光标所在行下空出一行，光标定位到新行位置\n\n\nShift + 左键单击\nShift + 左键单击\n在打开的文件名上按此快捷键，可以关闭当前打开文件\n\n\n2.4.Ctrl+Alt\n\n\nWin 快捷键\nMac 快捷键\n功能介绍\n\n\n\nCtrl + Alt + L\nCommand + Option + L\n格式化代码，可以对当前文件和整个包目录使用\n\n\nCtrl + Alt + O\nControl + Option + O\n优化导入的类，可以对当前文件和整个包目录使用\n\n\nCtrl + Alt + T\nCommand + Option + T\n对选中的代码弹出环绕选项弹出层\n\n\nCtrl + Alt + S\nCommand + 逗号\n打开 IntelliJ IDEA 系统设置\n\n\nCtrl + Alt + Enter\nCommand + Option + Enter\n光标所在行上空出一行，光标定位到新行\n\n\nCtrl + Alt + 左方向键\nCommand + Option + 左方向键\n退回到上一个操作的地方\n\n\nCtrl + Alt + 右方向键\nCommand + Option + 右方向键\n前进到上一个操作的地方\n\n\n2.5.Ctrl+Shift\n\n\nWin 快捷键\nMac 快捷键\n功能介绍\n\n\n\nCtrl + Shift + F\nCommand + Shift + F\n根据输入内容查找整个项目 或 指定目录内文件\n\n\nCtrl + Shift + R\nCommand + Shift + F\n根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件\n\n\nCtrl + Shift + J\nControl + Shift + J\n自动将下一行合并到当前行末尾\n\n\nCtrl + Shift + Z\nCommand + Shift + Z\n取消撤销\n\n\nCtrl + Shift + W\nOption + 方向键下\n递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围\n\n\nCtrl + Shift + N\nCommand + Shift + O\n通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠\n\n\nCtrl + Shift + U\nCommand + Shift + U\n对选中的代码进行大 / 小写轮流转换\n\n\nCtrl + Shift + T\nCommand + Shift + T\n对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择\n\n\nCtrl + Shift + C\nCommand + Shift + C\n复制当前文件磁盘路径到剪贴板\n\n\nCtrl + Shift + B\nControl + Shift + B\n跳转到类型声明处\n\n\nCtrl + Shift + /\nCommand + Option + /\n代码块注释\n\n\nCtrl + Shift + [\nCommand + Shift + [\n选中从光标所在位置到它的顶部中括号位置\n\n\nCtrl + Shift + ]\nCommand + Shift + ]\n选中从光标所在位置到它的底部中括号位置\n\n\nCtrl + Shift + 加号\nCommand + Shift + 加号\n展开所有代码\n\n\nCtrl + Shift + 减号\nCommand + Shift + 减号\n折叠所有代码\n\n\nCtrl + Shift + F7\nCommand + Shift + F7\n高亮显示所有该选中文本，按Esc高亮消失\n\n\nCtrl + Shift + F12\nCommand + Shift + F12\n编辑器最大化\n\n\nCtrl + Shift + Enter\nCommand + Shift + Enter\n自动结束代码，行末自动添加分号\n\n\nCtrl + Shift + Backspace\nCtrl + Shift + Backspace\n退回到上次修改的地方\n\n\nCtrl + Shift + 1,2,3…9\nControl + Shift + 1,2,3…9\n快速添加指定数值的书签\n\n\nCtrl + Shift + 左键单击\nCommand + Shift + 左键单击\n把光标放在某个类变量上，按此快捷键可以直接定位到该类中\n\n\nCtrl + Shift + 左方向键\nOption + Shift + 左方向键\n在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句\n\n\nCtrl + Shift + 右方向键\nOption + Shift + 右方向键\n在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句\n\n\nCtrl + Shift + 前方向键\nCommand + Shift + 前方向键\n光标放在方法名上，将方法移动到上一个方法前面，调整方法排序\n\n\nCtrl + Shift + 后方向键\nCommand + Shift + 后方向键\n光标放在方法名上，将方法移动到下一个方法前面，调整方法排序\n\n\n2.6. Alt+Shift\n\n\nWin 快捷键\nMac 快捷键\n功能介绍\n\n\n\nAlt + Shift + N\nOption + Shift + B\n选择 / 添加 task\n\n\nAlt + Shift + 左键双击\nOption + Shift + 左键双击\n选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句\n\n\nAlt + Shift + 前方向键\nOption + Shift + 前方向键\n移动光标所在行向上移动\n\n\nAlt + Shift + 后方向键\nOption + Shift + 后方向键\n移动光标所在行向下移动\n\n\n2.7.其他\n\n\nWin 快捷键\nMac 快捷键\n功能介绍\n\n\n\nF2\nF2\n跳转到下一个高亮错误 或 警告位置\n\n\nF4\nF4\n编辑源\n\n\nF11\nF3\n添加书签\n\n\nF12\nF12\n回到前一个工具窗口\n\n\nTab\nTab\n缩进\n\n\nESC\nESC\n从工具窗口进入代码文件窗口\n\n\n","slug":"shortcut","date":"2021-06-07T10:35:50.000Z","categories_index":"黑科技知识","tags_index":"Mac,后端开发,Java,开发工具,idea","author_index":"Markcwg"},{"id":"68fffcca682c31267962b9be63cae57a","title":"Mac(M1)常用环境安装","content":"1.引言\n\n\n\n\n\n\n\n\nMac M1 的常用环境安装\n2.环境安装2.1 jdk安装\n目前jdk有适配arm架构的zulu版本，直接下载安装即可\n下载地址：https://www.azul.com/downloads/?package=jdk\n选择对应版本下载直接安装\n环境变量会自动配置，安装完成后在命令行检验即可\n\nmarkcwg@192 ~ % java -version\nopenjdk version &quot;1.8.0_292&quot;\nOpenJDK Runtime Environment (Zulu 8.54.0.21-CA-macos-aarch64) (build 1.8.0_292-b10)\nOpenJDK 64-Bit Server VM (Zulu 8.54.0.21-CA-macos-aarch64) (build 25.292-b10, mixed mode)\n\n2.2 maven安装\nmaven也是直接从官网安装即可\n\n下载地址： http://maven.apache.org/download.cgi\n\n下载对应的tar.gz包，解压到自己的目录(我的是 /Users/markcwg/dev/apache-maven-3.8.1/)\n\n配置环境变量\nvim ~&#x2F;.bash_profile\n\n#以下是配置内容,MAVEN_HOME之后的内容换成自己的安装地址\nexport MAVEN_HOME&#x3D;&#x2F;Users&#x2F;markcwg&#x2F;dev&#x2F;apache-maven-3.8.1\nexport PATH&#x3D;$PATH:$MAVEN_HOME&#x2F;bin\n由于重启后默认使用的是 ~/.zshrc配置文件，所以还需要编辑一下 ~/.zshrc文件\nsudo vim ~&#x2F;.zshrc\n#在这里刷新bash_profile即可\nsource ~&#x2F;.bash_profile\n配置完成后刷新配置文件 source ~/.zshrc\n\n检查是否安装成功\n\n\nmarkcwg@192 ~ % mvn -v\nApache Maven 3.8.1 (05c21c65bdfed0f71a2f2ada8b84da59348c4c5d)\nMaven home: &#x2F;Users&#x2F;markcwg&#x2F;dev&#x2F;apache-maven-3.8.1\nJava version: 1.8.0_292, vendor: Azul Systems, Inc., runtime: &#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;zulu-8.jdk&#x2F;Contents&#x2F;Home&#x2F;jre\nDefault locale: zh_CN, platform encoding: UTF-8\nOS name: &quot;mac os x&quot;, version: &quot;11.4&quot;, arch: &quot;aarch64&quot;, family: &quot;mac&quot;\n\n2.3 homebrew安装\nmac上很多东西都通过brew安装\n\n安装homebrew的过程并不是很友好，试了很多方法\n\n最后在一位大佬的博客里成功找到解决方案\n\n一行代码直接搞定\n&#x2F;bin&#x2F;zsh -c “$(curl -fsSL https:&#x2F;&#x2F;gitee.com&#x2F;feraljas&#x2F;HomebrewCN&#x2F;raw&#x2F;master&#x2F;Homebrew.sh)”\n运行脚本之后直接在线安装，脚本运行过程中的关键步骤提示是中文，跟着走完就完事了\n\n\n2.4 svn和git安装\n作为常用的版本控制工具，开发过程中肯定是少不了的\n这两个的安装都不算难，直接利用homebrew命令行安装就好了\nbrew install svn\nbrew install git\n\n2.5 idea安装\n作为java后端开发程序员，idea是少不了的(嘿嘿，反正对我来说是少不了的)\n目前 jetbrains 已经有适配版的安装包，按需下载即可\n下载地址： https://www.jetbrains.com/zh-cn/idea/download/#section=mac\n注意下载的时候选择 Apple Silicon芯片版\n\n2.6 postman安装\npostman用于接口测试\n下载地址：https://www.postman.com/downloads/\n直接下载安装即可\n\n2.7 vscode安装\nvscode的安装也很简单\n下载地址： https://vscode.cdn.azure.cn/insider/861a88ebadb4335df92251faf6420b598440e082/VSCode-darwin-arm64.zip\n打开这个链接会直接开始下载，正常安装即可\n\n2.8 nodejs安装\nnode的安装也是直接在官网即可\n下载地址： https://nodejs.org/en/download/\n安装完成后验证\n\nmarkcwg@192 ~ % node -v\nv14.17.0\nmarkcwg@192 ~ % npm -v\n6.14.13\n\n","slug":"mac","date":"2021-06-06T00:55:28.000Z","categories_index":"知识分享","tags_index":"Mac,换机,环境安装,后端开发,Java","author_index":"Markcwg"},{"id":"0817a21a48fa8ae8f6b7dc8a18bad753","title":"MyBatis-Plus体验","content":"1. 简介\n\n\n\n\n\n\n\n\nMyBatis-Plus （简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生\n1.1. 前置技能\n熟悉Java开发环境以及相应的IDE\n熟悉Spring Boot\n熟悉Maven\n\n1.2.特性\n无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑\n损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作\n强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求\n支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错\n支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题\n支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作\n支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）\n内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用\n内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询\n分页插件支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库\n内置性能分析插件：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询\n内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作\n\n1.3.框架结构\n2.初体验2.1.准备数据库、表DROP TABLE IF EXISTS user;\n-- 创建数据表 user\nCREATE TABLE user\n(\n\tid BIGINT(20) NOT NULL COMMENT &#39;主键ID&#39;,\n\tname VARCHAR(30) NULL DEFAULT NULL COMMENT &#39;姓名&#39;,\n\tage INT(11) NULL DEFAULT NULL COMMENT &#39;年龄&#39;,\n\temail VARCHAR(50) NULL DEFAULT NULL COMMENT &#39;邮箱&#39;,\n    create_time datetime NULL DEFAULT NULL COMMENT &#39;创建时间&#39;,\n    update_time datetime NULL DEFAULT NULL COMMENT &#39;更新时间&#39;,\n\tPRIMARY KEY (id)\n);\n\n-- 插入测试数据\nINSERT INTO user (id, name, age, email) VALUES\n(1, &#39;Jone&#39;, 18, &#39;test1@baomidou.com&#39;),\n(2, &#39;Jack&#39;, 20, &#39;test2@baomidou.com&#39;),\n(3, &#39;Tom&#39;, 28, &#39;test3@baomidou.com&#39;),\n(4, &#39;Sandy&#39;, 21, &#39;test4@baomidou.com&#39;),\n(5, &#39;Billie&#39;, 24, &#39;test5@baomidou.com&#39;);\n\n2.2.创建项目并引入相应mp2.2.1.创建项目\n2.2.2.引入mybatis-plus&lt;properties&gt;\n        &lt;mp.version&gt;3.3.0&lt;&#x2F;mp.version&gt;\n&lt;&#x2F;properties&gt;\n\n&lt;dependency&gt;\n        &lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;mybatis-plus-boot-starter&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;$&#123;mp.version&#125;&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n\n2.3.3.pom文件&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;2.5.0&lt;&#x2F;version&gt;\n        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;&#x2F;parent&gt;\n    &lt;groupId&gt;com.study&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;mpdemo&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n    &lt;name&gt;mpdemo&lt;&#x2F;name&gt;\n    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;\n        &lt;mp.version&gt;3.3.0&lt;&#x2F;mp.version&gt;\n        &lt;druid.version&gt;1.1.18&lt;&#x2F;druid.version&gt;\n    &lt;&#x2F;properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;$&#123;druid.version&#125;&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;$&#123;mp.version&#125;&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;\n            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;\n            &lt;optional&gt;true&lt;&#x2F;optional&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;\n            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;\n            &lt;optional&gt;true&lt;&#x2F;optional&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;\n            &lt;scope&gt;test&lt;&#x2F;scope&gt;\n        &lt;&#x2F;dependency&gt;\n    &lt;&#x2F;dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;excludes&gt;\n                        &lt;exclude&gt;\n                            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;\n                            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;\n                        &lt;&#x2F;exclude&gt;\n                    &lt;&#x2F;excludes&gt;\n                &lt;&#x2F;configuration&gt;\n            &lt;&#x2F;plugin&gt;\n        &lt;&#x2F;plugins&gt;\n    &lt;&#x2F;build&gt;\n\n&lt;&#x2F;project&gt;\n\n2.3.开始使用1. 修改配置文件\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    type: com.alibaba.druid.pool.DruidDataSource\n    url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;mybatis-plus?serverTimezone&#x3D;GMT%2B8\n    username: root\n    password: ******\nserver:\n  port: 8080\n\n2. 在启动类上开启Mapper扫描\n@SpringBootApplication\n@MapperScan(basePackages &#x3D; &quot;com.study.mpdemo.mapper&quot;)\npublic class MpdemoApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(MpdemoApplication.class, args);\n    &#125;\n&#125;\n\n3. 创建User类\n@Data\npublic class User &#123;\n    private Long id;\n    private String name;\n    private Integer age;\n    private String email;\n    private LocalDateTime createTime;\n    private LocalDateTime updateTime;\n&#125;\n\n4. 编写Mapper接口\npublic interface UserMapper extends BaseMapper&lt;User&gt; &#123;\n\n&#125;   \n\n5. 编写测试类\n@SpringBootTest\n@Slf4j\nclass MpdemoApplicationTests &#123;\n    @Autowired\n    private UserMapper userMapper;\n\n    @Test\n    void testBeginMapper() &#123;\n        List&lt;User&gt; users &#x3D; userMapper.selectList(null);\n        users.forEach(user -&gt; log.debug(&quot;&#123;&#125;&quot;,user));\n    &#125;\n\n&#125;\n\n6. 控制台打印结果\n2021-06-04 16:47:21.201 [main] DEBUG c.s.m.mapper.UserMapper.selectList - &#x3D;&#x3D;&gt;  Preparing: SELECT id,name,age,email,create_time,update_time FROM user \n2021-06-04 16:47:21.224 [main] DEBUG c.s.m.mapper.UserMapper.selectList - &#x3D;&#x3D;&gt; Parameters: \n2021-06-04 16:47:21.253 [main] DEBUG c.s.m.mapper.UserMapper.selectList - &lt;&#x3D;&#x3D;      Total: 5\n2021-06-04 16:47:21.257 [main] DEBUG c.s.mpdemo.MpdemoApplicationTests - User(id&#x3D;1, name&#x3D;Jone, age&#x3D;18, email&#x3D;test1@baomidou.com, createTime&#x3D;null, updateTime&#x3D;null)\n2021-06-04 16:47:21.259 [main] DEBUG c.s.mpdemo.MpdemoApplicationTests - User(id&#x3D;2, name&#x3D;Jack, age&#x3D;20, email&#x3D;test2@baomidou.com, createTime&#x3D;null, updateTime&#x3D;null)\n2021-06-04 16:47:21.259 [main] DEBUG c.s.mpdemo.MpdemoApplicationTests - User(id&#x3D;3, name&#x3D;Tom, age&#x3D;28, email&#x3D;test3@baomidou.com, createTime&#x3D;null, updateTime&#x3D;null)\n2021-06-04 16:47:21.259 [main] DEBUG c.s.mpdemo.MpdemoApplicationTests - User(id&#x3D;4, name&#x3D;Sandy, age&#x3D;21, email&#x3D;test4@baomidou.com, createTime&#x3D;null, updateTime&#x3D;null)\n2021-06-04 16:47:21.259 [main] DEBUG c.s.mpdemo.MpdemoApplicationTests - User(id&#x3D;5, name&#x3D;Billie, age&#x3D;24, email&#x3D;test5@baomidou.com, createTime&#x3D;null, updateTime&#x3D;null)\n\n3.常用注解\n@TableName\n\n描述：表名注解\n\n\n\n\n属性\n类型\n必须指定\n默认值\n描述\n\n\n\nvalue\nString\n否\n“”\n表名\n\n\nschema\nString\n否\n“”\nschema\n\n\nkeepGlobalPrefix\nboolean\n否\nfalse\n是否保持使用全局的 tablePrefix 的值(如果设置了全局 tablePrefix 且自行设置了 value 的值)\n\n\nresultMap\nString\n否\n“”\nxml 中 resultMap 的 id\n\n\nautoResultMap\nboolean\n否\nfalse\n是否自动构建 resultMap 并使用(如果设置 resultMap 则不会进行 resultMap 的自动构建并注入)\n\n\nexcludeProperty\nString[]\n否\n{}\n需要排除的属性名(@since 3.3.1)\n\n\n\n@TableId\n\n描述：主键注解\n\n\n\n\n属性\n类型\n必须指定\n默认值\n描述\n\n\n\nvalue\nString\n否\n“”\n主键字段名\n\n\ntype\nEnum\n否\nIdType.NONE\n主键类型\n\n\n\nIdType\n\n\n\n\n值\n描述\n\n\n\nAUTO\n数据库ID自增\n\n\nNONE\n无状态,该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)\n\n\nINPUT\ninsert前自行set主键值\n\n\nASSIGN_ID\n分配ID(主键类型为Number(Long和Integer)或String)(since 3.3.0),使用接口IdentifierGenerator的方法nextId(默认实现类为DefaultIdentifierGenerator雪花算法)\n\n\nASSIGN_UUID\n分配UUID,主键类型为String(since 3.3.0),使用接口IdentifierGenerator的方法nextUUID(默认default方法)\n\n\nID_WORKER\n分布式全局唯一ID 长整型类型(please use ASSIGN_ID)\n\n\nUUID\n32位UUID字符串(please use ASSIGN_UUID)\n\n\nID_WORKER_STR\n分布式全局唯一ID 字符串类型(please use ASSIGN_ID)\n\n\n\n@TableField\n\n描述：字段注解\n\n\n\n\n属性\n类型\n必须指定\n默认值\n描述\n\n\n\nvalue\nString\n否\n“”\n数据库字段名\n\n\nel\nString\n否\n“”\n映射为原生 #&#123; ... &#125; 逻辑,相当于写在 xml 里的 #&#123; ... &#125; 部分\n\n\nexist\nboolean\n否\ntrue\n是否为数据库表字段\n\n\ncondition\nString\n否\n“”\n字段 where 实体查询比较条件,有值设置则按设置的值为准,没有则为默认全局的 %s=#&#123;%s&#125;,参考(opens new window)\n\n\nupdate\nString\n否\n“”\n字段 update set 部分注入, 例如：update=”%s+1”：表示更新时会set version=version+1(该属性优先级高于 el 属性)\n\n\ninsertStrategy\nEnum\nN\nDEFAULT\n举例：NOT_NULL: insert into table_a(&lt;if test=&quot;columnProperty != null&quot;&gt;column&lt;/if&gt;) values (&lt;if test=&quot;columnProperty != null&quot;&gt;#&#123;columnProperty&#125;&lt;/if&gt;)\n\n\nupdateStrategy\nEnum\nN\nDEFAULT\n举例：IGNORED: update table_a set column=#&#123;columnProperty&#125;\n\n\nwhereStrategy\nEnum\nN\nDEFAULT\n举例：NOT_EMPTY: where &lt;if test=&quot;columnProperty != null and columnProperty!=&#39;&#39;&quot;&gt;column=#&#123;columnProperty&#125;&lt;/if&gt;\n\n\nfill\nEnum\n否\nFieldFill.DEFAULT\n字段自动填充策略\n\n\nselect\nboolean\n否\ntrue\n是否进行 select 查询\n\n\nkeepGlobalFormat\nboolean\n否\nfalse\n是否保持使用全局的 format 进行处理\n\n\njdbcType\nJdbcType\n否\nJdbcType.UNDEFINED\nJDBC类型 (该默认值不代表会按照该值生效)\n\n\ntypeHandler\nClass&lt;? extends TypeHandler&gt;\n否\nUnknownTypeHandler.class\n类型处理器 (该默认值不代表会按照该值生效)\n\n\nnumericScale\nString\n否\n“”\n指定小数点后保留的位数\n\n\n\n@Version\n\n描述：乐观锁注解、标记@Version在字段上\n\n\n@EnumValue\n\n描述：通枚举类注解，注解在枚举字段上\n\n\n@TableLogic\n\n描述：表字段逻辑处理注解(逻辑删除)\n\n\n@KeySequence\n\n描述：序列主键策略\n\n\n\n\n属性\n类型\n必须指定\n默认值\n描述\n\n\n\nvalue\nString\n否\n“”\n序列名\n\n\nclazz\nClass\n否\nLong.class\nid的类型, 可以指定String.class，这样返回的Sequence值是字符串”1”\n\n\n\n@OrderBy\n\n描述：内置SQL默认指定排序，优先级低于wrapper条件查询\n\n\n\n\n属性\n类型\n必须指定\n默认值\n描述\n\n\n\nisDesc\nboolean\n否\n是\n是否倒序查询\n\n\nsort\nsort\n否\nShort.MAX_VALUE\n数字越小越靠前\n\n\n4.核心功能\n\n","slug":"mybatis-plus","date":"2021-06-03T01:35:11.000Z","categories_index":"学习笔记","tags_index":"后端开发,Java,ORM,MyBatis,持久层,数据库,CRUD","author_index":"Markcwg"}]