{"title":"jvm","uid":"564790740ba698a5ef60f23f00c2b931","slug":"jvm","date":"2021-06-13T02:48:31.000Z","updated":"2021-06-15T03:16:38.271Z","comments":true,"path":"api/articles/jvm.json","keywords":null,"cover":null,"content":"<h1 id=\"JVM-常见面试题\"><a href=\"#JVM-常见面试题\" class=\"headerlink\" title=\"JVM 常见面试题\"></a>JVM 常见面试题</h1><ul>\n<li>请你谈谈对 jvm 的理解 java8 虚拟机和之前的变换更新？</li>\n<li>什么是 OOM？什么是栈溢出 StackOverflow？怎么分析？</li>\n<li>JVM 的常用调优参数有哪些？</li>\n<li>内存快照如何抓取？怎么分析 Dump 文件？</li>\n<li>谈谈对 JVM 中类加载器的认识</li>\n</ul>\n<ol>\n<li><p>JVM 的位置</p>\n</li>\n<li><p>JVM 的体系结构</p>\n</li>\n<li><p>类加载器</p>\n</li>\n<li><p>双亲委派机制</p>\n</li>\n<li><p>沙箱安全机制</p>\n</li>\n<li><p>native</p>\n</li>\n<li><p>PC 寄存器</p>\n</li>\n<li><p>方法区</p>\n</li>\n<li><p>栈</p>\n</li>\n<li><p>三种 JVM</p>\n</li>\n<li><p>堆</p>\n<p>一个 JVM 只有一个堆内存。</p>\n<p>类加载器读取了类文件之后，一般会把什么东西放到堆中？ 类、方法、常量、变量 、保存所有引用类型的真实对象</p>\n<p>堆内存中还要细分为三个区域</p>\n<ul>\n<li>新生区(伊甸园区)<ul>\n<li>伊甸园区</li>\n<li>幸存区 0 区</li>\n<li>幸存区 1 区 </li>\n</ul>\n</li>\n<li>养老区 </li>\n<li>永久区 <ul>\n<li>这个区域常驻内存的。用来存放 jdk 自身的 class 对象，interface 元数据。可以说是存储 java 运行时环境和类信息，这个区域不存在垃圾回收，关闭 VM 虚拟机就会释放</li>\n<li>jdk1.6之前： 永久代，常量池在方法区</li>\n<li>jdk1.7：永久代，但是慢慢的在退化，<code>去永久代</code></li>\n<li>jdk1.8 之后：无永久代，常量池在元空间</li>\n</ul>\n</li>\n</ul>\n<p>在 JDK8 以后，永久区改了个名字（元空间）</p>\n</li>\n<li><p>新生区、老年区</p>\n</li>\n<li><p>永久区</p>\n</li>\n<li><p>堆内存调优</p>\n</li>\n<li><p>GC</p>\n<ol>\n<li>常用算法</li>\n</ol>\n</li>\n<li><p>JMM</p>\n</li>\n<li><p>总结</p>\n</li>\n</ol>\n<p>学习方式</p>\n<ol>\n<li>百度</li>\n<li>思维导图</li>\n</ol>\n","text":"JVM 常见面试题 请你谈谈对 jvm 的理解 java8 虚拟机和之前的变换更新？ 什么是 OOM？什么是栈溢出 StackOverflow？怎么分析？ JVM 的常用调优参数有哪些？ 内存快照如何抓取？怎么分析 Dump 文件？ 谈谈对 JVM 中类加载器的认识 JVM 的位...","link":"","photos":[],"count_time":{"symbolsCount":589,"symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JVM-%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98\"><span class=\"toc-text\">JVM 常见面试题</span></a></li></ol>","author":{"name":"Markcwg","slug":"blog-author","avatar":"https://i.picsum.photos/id/1006/3000/2000.jpg?hmac=x83pQQ7LW1UTo8HxBcIWuRIVeN_uCg0cG6keXvNvM8g","link":"/","description":"多年以来，她一直在一处山中修道幽居，不来见我。何处山头？在我心中而已","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Docker学习笔记","uid":"0a3a9562fcdec8d119937b1919ce2fb3","slug":"docker笔记","date":"2021-05-27T02:32:36.000Z","updated":"2021-05-28T13:55:58.000Z","comments":true,"path":"api/articles/docker笔记.json","keywords":null,"cover":"https://pic.img.api.xydwz.cn/imgs/2021/05/28/u32351954403408778472fm26gp0ed2f94e232d81451.md.jpg","text":"零 特别说明 本文是学习B站狂神说java的课程之后，整理而出 对原课程感兴趣的小伙伴，可以点击传送门 一 Docker概述1 Docker简介Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Wi...","link":"","photos":[],"count_time":{"symbolsCount":"35k","symbolsTime":"32 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":3,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"Docker","slug":"Docker","count":1,"path":"api/tags/Docker.json"},{"name":"DevOps","slug":"DevOps","count":1,"path":"api/tags/DevOps.json"},{"name":"容器化技术","slug":"容器化技术","count":1,"path":"api/tags/容器化技术.json"},{"name":"自动部署","slug":"自动部署","count":1,"path":"api/tags/自动部署.json"}],"author":{"name":"Markcwg","slug":"blog-author","avatar":"https://i.picsum.photos/id/1006/3000/2000.jpg?hmac=x83pQQ7LW1UTo8HxBcIWuRIVeN_uCg0cG6keXvNvM8g","link":"/","description":"多年以来，她一直在一处山中修道幽居，不来见我。何处山头？在我心中而已","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true,"pinned":true},"next_post":{"title":"Java 多线程基础","uid":"98a1249129d8635543c07e96d38d4ad9","slug":"thread-base","date":"2021-06-13T01:55:46.000Z","updated":"2021-06-15T09:04:33.047Z","comments":true,"path":"api/articles/thread-base.json","keywords":null,"cover":"https://pic.img.api.xydwz.cn/imgs/2021/06/13/01349b6d5fe7e8187a8806ea1ec03e7bf7b1212dbe0921f4.png","text":"1.创建线程的方式1.1.继承 Thread 类 通过继承 Thread 类并重写 run 方法可以创建一个新的线程 public class Thread1 &#123; public static void main(String[] args) &#123; new MyT...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":3,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"Java","slug":"Java","count":5,"path":"api/tags/Java.json"},{"name":"多线程","slug":"多线程","count":1,"path":"api/tags/多线程.json"},{"name":"同步","slug":"同步","count":1,"path":"api/tags/同步.json"}],"author":{"name":"Markcwg","slug":"blog-author","avatar":"https://i.picsum.photos/id/1006/3000/2000.jpg?hmac=x83pQQ7LW1UTo8HxBcIWuRIVeN_uCg0cG6keXvNvM8g","link":"/","description":"多年以来，她一直在一处山中修道幽居，不来见我。何处山头？在我心中而已","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}