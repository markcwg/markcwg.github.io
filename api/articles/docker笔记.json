{"title":"Docker学习笔记","uid":"0a3a9562fcdec8d119937b1919ce2fb3","slug":"docker笔记","date":"2021-05-27T02:32:36.000Z","updated":"2021-08-07T02:57:39.411Z","comments":true,"path":"api/articles/docker笔记.json","keywords":null,"cover":"https://markcwg-blog.oss-cn-chengdu.aliyuncs.com/uPic/u32351954403408778472fm26gp0ed2f94e232d81451.md.jpg","content":"<h1 id=\"零-特别说明\"><a href=\"#零-特别说明\" class=\"headerlink\" title=\"零 特别说明\"></a>零 特别说明</h1><ul>\n<li>本文是学习B站狂神说java的课程之后，整理而出</li>\n<li>对原课程感兴趣的小伙伴，可以点击<a href=\"https://www.bilibili.com/video/BV1og4y1q7M4?p=1\">传送门</a></li>\n</ul>\n<h1 id=\"一-Docker概述\"><a href=\"#一-Docker概述\" class=\"headerlink\" title=\"一 Docker概述\"></a>一 Docker概述</h1><h2 id=\"1-Docker简介\"><a href=\"#1-Docker简介\" class=\"headerlink\" title=\"1 Docker简介\"></a>1 Docker简介</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。一个完整的Docker有以下几个部分组成：</p>\n<ol>\n<li>DockerClient客户端</li>\n<li>Docker Daemon守护进程</li>\n<li>Docker Image镜像</li>\n<li>DockerContainer容器</li>\n</ol>\n<h2 id=\"2-Docker的历史\"><a href=\"#2-Docker的历史\" class=\"headerlink\" title=\"2 Docker的历史\"></a>2 Docker的历史</h2><p>Docker 是 PaaS 提供商 dotCloud 开源的一个基于 <a href=\"https://baike.baidu.com/item/LXC\">LXC</a> 的高级容器引擎，源代码托管在 Github 上, 基于go语言并遵从Apache2.0协议开源。</p>\n<p>Docker自2013年以来非常火热，无论是从 github 上的代码活跃度，还是Redhat在RHEL6.5中集成对Docker的支持, 就连 Google 的 Compute Engine 也支持 docker 在其之上运行。</p>\n<h1 id=\"二-Docker的安装\"><a href=\"#二-Docker的安装\" class=\"headerlink\" title=\"二 Docker的安装\"></a>二 Docker的安装</h1><h2 id=\"1-Docker组成\"><a href=\"#1-Docker组成\" class=\"headerlink\" title=\"1 Docker组成\"></a>1 Docker组成</h2><p><img src=\"https://markcwg-blog.oss-cn-chengdu.aliyuncs.com/uPic/docker1873780abf6a0ae5.png\" alt=\"docker1873780abf6a0ae5.png\"></p>\n<ul>\n<li><strong>镜像 image</strong></li>\n</ul>\n<p>docker镜像就好比是一个目标，可以通过这个目标来创建容器服务，tomcat镜像==&gt;run==&gt;容器（提 供服务器），通过这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器中的）</p>\n<ul>\n<li><strong>容器 container</strong></li>\n</ul>\n<p>Docker利用容器技术，独立运行一个或者一组应用，通过镜像来创建的. 启动，停止，删除，基本命令 目前就可以把这个容器理解为就是一个简易的 Linux系统。</p>\n<ul>\n<li><strong>仓库</strong> <strong>repository</strong></li>\n</ul>\n<p>仓库就是存放镜像的地方！ 仓库分为公有仓库和私有仓库。(很类似git) Docker Hub是国外的。 阿里云…都有容器服务器(配置镜像加速!)</p>\n<h2 id=\"2-安装Docker\"><a href=\"#2-安装Docker\" class=\"headerlink\" title=\"2 安装Docker\"></a>2 安装Docker</h2><h3 id=\"2-1-环境准备\"><a href=\"#2-1-环境准备\" class=\"headerlink\" title=\"2.1 环境准备\"></a>2.1 环境准备</h3><ul>\n<li>linux内核要求3.0以上</li>\n</ul>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@iZvqu2nti7lrv4Z ~]# uname -r\n3.10.0-957.21.3.el7.x86_64\n[root@iZvqu2nti7lrv4Z ~]# cat &#x2F;etc&#x2F;os-release \nNAME&#x3D;&quot;CentOS Linux&quot;\nVERSION&#x3D;&quot;7 (Core)&quot;\nID&#x3D;&quot;centos&quot;\nID_LIKE&#x3D;&quot;rhel fedora&quot;\nVERSION_ID&#x3D;&quot;7&quot;\nPRETTY_NAME&#x3D;&quot;CentOS Linux 7 (Core)&quot;\nANSI_COLOR&#x3D;&quot;0;31&quot;\nCPE_NAME&#x3D;&quot;cpe:&#x2F;o:centos:centos:7&quot;\nHOME_URL&#x3D;&quot;https:&#x2F;&#x2F;www.centos.org&#x2F;&quot;\nBUG_REPORT_URL&#x3D;&quot;https:&#x2F;&#x2F;bugs.centos.org&#x2F;&quot;\n\nCENTOS_MANTISBT_PROJECT&#x3D;&quot;CentOS-7&quot;\nCENTOS_MANTISBT_PROJECT_VERSION&#x3D;&quot;7&quot;\nREDHAT_SUPPORT_PRODUCT&#x3D;&quot;centos&quot;\nREDHAT_SUPPORT_PRODUCT_VERSION&#x3D;&quot;7&quot;</code></pre>\n\n<h3 id=\"2-2-安装\"><a href=\"#2-2-安装\" class=\"headerlink\" title=\"2.2 安装\"></a>2.2 安装</h3><ul>\n<li>docker官方的文档非常详细</li>\n<li>文档地址 <a href=\"https://docs.docker.com/engine/install/\">https://docs.docker.com/engine/install/</a></li>\n</ul>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 1.卸载旧版本\n sudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n#2.需要的安装包\nyum install -y yum-utils\n#3.设置镜像的仓库\nyum-config-manager \\\n--add-repo \\\nhttps:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo\n#默认是从国外的，不推荐\n#推荐使用国内的\nyum-config-manager \\\n--add-repo \\\nhttps:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo\n#更新yum软件包索引\nyum makecache fast\n#4.安装docker相关的 docker-ce 社区版 而ee是企业版\nyum install docker-ce docker-ce-cli containerd.io\n#5. 使用docker version查看是否按照成功\ndocker version\n#6. 测试\n[root@iZvqu2nti7lrv4Z ~]# docker run hello-world\nUnable to find image &#39;hello-world:latest&#39; locally\nlatest: Pulling from library&#x2F;hello-world\nb8dfde127a29: Pull complete \nDigest: sha256:5122f6204b6a3596e048758cabba3c46b1c937a46b5be6225b835d091b90e46c\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https:&#x2F;&#x2F;hub.docker.com&#x2F;\n\nFor more examples and ideas, visit:\n https:&#x2F;&#x2F;docs.docker.com&#x2F;get-started&#x2F;\n                 </code></pre>\n\n<h3 id=\"2-3-阿里云镜像加速\"><a href=\"#2-3-阿里云镜像加速\" class=\"headerlink\" title=\"2.3 阿里云镜像加速\"></a>2.3 阿里云镜像加速</h3><ul>\n<li>登录阿里云找到容器服务</li>\n<li>找到镜像加速器</li>\n</ul>\n<p><img src=\"https://markcwg-blog.oss-cn-chengdu.aliyuncs.com/uPic/16ee5e6eaf6438eee3b6075e5e6824ff628491d5616bb7e4.png\" alt=\"16ee5e6eaf6438eee3b6075e5e6824ff628491d5616bb7e4.png\"></p>\n<ul>\n<li>根据自己的系统类型，选择相应脚本</li>\n<li>直接运行给出的脚本即可</li>\n</ul>\n<h2 id=\"3-工作原理\"><a href=\"#3-工作原理\" class=\"headerlink\" title=\"3 工作原理\"></a>3 工作原理</h2><h3 id=\"3-1-Docker是怎样工作的\"><a href=\"#3-1-Docker是怎样工作的\" class=\"headerlink\" title=\"3.1 Docker是怎样工作的\"></a>3.1 Docker是怎样工作的</h3><p>Docker是一个C-S结构的系统，其守护进程运行在主机上，通过Socket从客户端访问</p>\n<p>Docker-Server接受到Docker-Client的指令，就会执行这个指令。</p>\n<p><img src=\"https://markcwg-blog.oss-cn-chengdu.aliyuncs.com/uPic/docker4e025df7ae53af48.png\" alt=\"docker4e025df7ae53af48.png\"></p>\n<h3 id=\"3-2-Docker为什么比VM快\"><a href=\"#3-2-Docker为什么比VM快\" class=\"headerlink\" title=\"3.2 Docker为什么比VM快\"></a>3.2 Docker为什么比VM快</h3><ol>\n<li><p>docker有着比虚拟机更少的抽象层。由于docker不需要Hypervisor实现硬件资源虚拟化,运行在 docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在 效率上有明显优势。 </p>\n</li>\n<li><p>docker利用的是宿主机的内核,而不需要Guest OS。 </p>\n<p>Guest OS： VM（虚拟机）里的的系统（OS）;</p>\n<p>Host OS：物理机里的系统（OS）</p>\n</li>\n</ol>\n<p>因此,当新建一个 容器时，docker不需要和虚拟机一样重新加载一个操作系统内核。然而避免引导、加载操作系统内核是个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，这个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了这个复杂的过程，因此 新建一个docker容器只需要几秒钟。</p>\n<h1 id=\"三-Docker的常用命令\"><a href=\"#三-Docker的常用命令\" class=\"headerlink\" title=\"三 Docker的常用命令\"></a>三 Docker的常用命令</h1><h2 id=\"1-帮助命令\"><a href=\"#1-帮助命令\" class=\"headerlink\" title=\"1 帮助命令\"></a>1 帮助命令</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">docker version #显示docker的版本信息\ndocker info #显示docker的系统信息，包括镜像和容器的数量\ndocker 命令A --help #查看命令A的帮助文档\n# 帮助文档的地址  https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;commandline&#x2F;build&#x2F;</code></pre>\n\n<h2 id=\"2-镜像命令\"><a href=\"#2-镜像命令\" class=\"headerlink\" title=\"2 镜像命令\"></a>2 镜像命令</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">docker images\t\t\t#查看所有本地主机的镜像，可以使用docker image ls代替\ndocker search  搜索镜像  # 搜索镜像 \ndocker pull 下载镜像\t #下载镜像\ndocker rmi 删除镜像\t     # 删除镜像</code></pre>\n\n<h3 id=\"2-1-docker-images\"><a href=\"#2-1-docker-images\" class=\"headerlink\" title=\"2.1 docker images\"></a>2.1 docker images</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@iZvqu2nti7lrv4Z ~]# docker images\nREPOSITORY      TAG       IMAGE ID       CREATED        SIZE\ncaffeine-demo   latest    2307f21b0d43   38 hours ago   674MB\ntomcat          latest    c43a65faae57   2 weeks ago    667MB\nhello-world     latest    d1165f221234   2 months ago   13.3kB\njava            8         d23bdf5b1b1b   4 years ago    643MB\n\n#解释\n#REPOSITORY\t\t#镜像的仓库源\n#TAG\t\t\t#镜像的标签，版本号\n#IMAGE ID\t\t#镜像的id\n#CREATED\t\t#镜像的创建时间\n#SIZE\t\t\t#镜像的大小\n\n#可选项\n[root@iZvqu2nti7lrv4Z ~]# docker images --help\n\nUsage:  docker images [OPTIONS] [REPOSITORY[:TAG]]\n\nList images\nOptions:\n  -a, --all             Show all images (default hides intermediate images) #显示所有镜像\n      --digests         Show digests\n  -f, --filter filter   Filter output based on conditions provided  #根据条件过滤\n      --format string   Pretty-print images using a Go template\n      --no-trunc        Don&#39;t truncate output\n  -q, --quiet           Only show image IDs #只显示id\n\n</code></pre>\n\n<h3 id=\"2-2-docker-pull\"><a href=\"#2-2-docker-pull\" class=\"headerlink\" title=\"2.2 docker pull\"></a>2.2 docker pull</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@iZvqu2nti7lrv4Z ~]# docker pull mysql:5.7\n5.7: Pulling from library&#x2F;mysql  #如果不写tag，默认就是latest\n69692152171a: Already exists \t #分层下载 docker image 的核心，联合文件系统\n1651b0be3df3: Already exists \n951da7386bc8: Already exists \n0f86c95aa242: Already exists \n37ba2d8bd4fe: Already exists \n6d278bb05e94: Already exists \n497efbd93a3e: Already exists \na023ae82eef5: Already exists \ne76c35f20ee7: Already exists \ne887524d2ef9: Already exists \nccb65627e1c3: Already exists \nDigest: sha256:a682e3c78fc5bd941e9db080b4796c75f69a28a8cad65677c23f7a9f18ba21fa #签名 防伪\nStatus: Downloaded newer image for mysql:5.7\ndocker.io&#x2F;library&#x2F;mysql:5.7 #真实镜像地址\n\ndocker pull mysql:5.7 等价于\ndocker pull docker.io&#x2F;library&#x2F;mysql:5.7</code></pre>\n\n<h3 id=\"2-3-docker-rmi\"><a href=\"#2-3-docker-rmi\" class=\"headerlink\" title=\"2.3 docker rmi\"></a>2.3 docker rmi</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">docker rmi -f 镜像id #删除指定的镜像\ndocker rmi -f 镜像id 镜像id 镜像id 镜像id#删除指定的镜像\ndocker rmi -f $(docker images -aq) #删除全部的镜像</code></pre>\n\n<h2 id=\"3-容器命令\"><a href=\"#3-容器命令\" class=\"headerlink\" title=\"3 容器命令\"></a>3 容器命令</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">docker run \t\t镜像ID\t#新建容器并启动\ndocker ps \t\t\t\t #列出所有运行中的容器\ndocker rm \t\t容器id\t#删除指定容器\ndocker start \t容器id\t#启动容器\ndocker restart \t容器id\t#重启容器\ndocker stop \t容器id\t#停止当前正在运行的容器\ndocker kill \t容器id\t#强制停止当前容器</code></pre>\n\n<p> 使用docker container查看容器有关的命令</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@iZvqu2nti7lrv4Z ~]# docker container\n\nUsage:  docker container COMMAND\n\nManage containers\n\nCommands:\n  attach      Attach local standard input, output, and error streams to a running container\n  commit      Create a new image from a container&#39;s changes\n  cp          Copy files&#x2F;folders between a container and the local filesystem\n  create      Create a new container\n  diff        Inspect changes to files or directories on a container&#39;s filesystem\n  exec        Run a command in a running container\n  export      Export a container&#39;s filesystem as a tar archive\n  inspect     Display detailed information on one or more containers\n  kill        Kill one or more running containers\n  logs        Fetch the logs of a container\n  ls          List containers\n  pause       Pause all processes within one or more containers\n  port        List port mappings or a specific mapping for the container\n  prune       Remove all stopped containers\n  rename      Rename a container\n  restart     Restart one or more containers\n  rm          Remove one or more containers\n  run         Run a command in a new container\n  start       Start one or more stopped containers\n  stats       Display a live stream of container(s) resource usage statistics\n  stop        Stop one or more running containers\n  top         Display the running processes of a container\n  unpause     Unpause all processes within one or more containers\n  update      Update configuration of one or more containers\n  wait        Block until one or more containers stop, then print their exit codes\n</code></pre>\n\n<h3 id=\"3-1-新建容器并启动\"><a href=\"#3-1-新建容器并启动\" class=\"headerlink\" title=\"3.1 新建容器并启动\"></a>3.1 新建容器并启动</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">docker run [可选参数] image | docker container run [可选参数] image\n# 参数说明\n-- name\t\t指定容器名字\n-d\t\t\t使用后台方式运行\n-it\t\t\t使用交互方式运行，进入容器内部查看内容\n-p\t\t\t指定容器的端口 -p 9090(宿主机):8080(容器)\n\t-p ip:主机端口:容器端口\n\t-p 主机端口:容器端口（最常用）\n\t-p 容器端口\n-P \t\t\t随机指定端口\n\n#测试创建并启动容器\n[root@iZvqu2nti7lrv4Z ~]# docker run -d --name tomcat_test -p9000:8080  tomcat\ne4aa89a6f9efa326020922648a98ff7c6039cf10fff004999a628f96fa5a2030\n\n#在主机中使用curl命令测试\ncurl localhost:9000\n&lt;!doctype html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;&lt;title&gt;HTTP Status 404 – Not Found&lt;&#x2F;title&gt;&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;body &#123;font-family:Tahoma,Arial,sans-serif;&#125; h1, h2, h3, b &#123;color:white;background-color:#525D76;&#125; h1 &#123;font-size:22px;&#125; h2 &#123;font-size:16px;&#125; h3 &#123;font-size:14px;&#125; p &#123;font-size:12px;&#125; a &#123;color:black;&#125; .line &#123;height:1px;background-color:#525D76;border:none;&#125;&lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 404 – Not Found&lt;&#x2F;h1&gt;&lt;hr class&#x3D;&quot;line&quot; &#x2F;&gt;&lt;p&gt;&lt;b&gt;Type&lt;&#x2F;b&gt; Status Report&lt;&#x2F;p&gt;&lt;p&gt;&lt;b&gt;Description&lt;&#x2F;b&gt; The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.&lt;&#x2F;p&gt;&lt;hr class&#x3D;&quot;line&quot; &#x2F;&gt;&lt;h3&gt;Apache Tomcat&#x2F;9.0.46&lt;&#x2F;h3&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;[root@iZvqu2nti7lrv4Z ~]# \n\n#由于官方的tomcat镜像是精简版，webapps下并没有东西，所有返回的数据是404，但就以9000端口访问能成功，说明测试通过</code></pre>\n\n<h3 id=\"3-2-列出所有运行的容器\"><a href=\"#3-2-列出所有运行的容器\" class=\"headerlink\" title=\"3.2 列出所有运行的容器\"></a>3.2 列出所有运行的容器</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">docker ps \t#列出正在运行的所有容器\n-a\t\t#列出全部容器，包括非运行状态\n-n\t\t#查看指定个数的容器\n-q\t\t#仅查看容器id\n\n[root@iZvqu2nti7lrv4Z ~]# docker ps\nCONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                                       NAMES\ne4aa89a6f9ef   tomcat         &quot;catalina.sh run&quot;        3 minutes ago   Up 3 minutes   0.0.0.0:9000-&gt;8080&#x2F;tcp, :::9000-&gt;8080&#x2F;tcp   tomcat_test\n8da52d98564e   2307f21b0d43   &quot;java -jar &#x2F;app.jar …&quot;   41 hours ago    Up 41 hours    0.0.0.0:8999-&gt;8082&#x2F;tcp, :::8999-&gt;8082&#x2F;tcp   caffeine\n[root@iZvqu2nti7lrv4Z ~]# \n</code></pre>\n\n<h3 id=\"3-3-退出容器\"><a href=\"#3-3-退出容器\" class=\"headerlink\" title=\"3.3 退出容器\"></a>3.3 退出容器</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">exit\t#容器停止退出\n快捷键 ctrl+P+Q #容器不停止退出</code></pre>\n\n<h3 id=\"3-4-删除容器\"><a href=\"#3-4-删除容器\" class=\"headerlink\" title=\"3.4 删除容器\"></a>3.4 删除容器</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">docker rm 容器id\t\t#删除指定的容器，不能删除正在运行的容器，强制删除用 rm-rf\ndocker rm -f $(docker ps -aq) #删除所有容器\ndocker ps -a -q|xargs docker rm #删除所有容器</code></pre>\n\n<h3 id=\"3-5-启动和停止容器\"><a href=\"#3-5-启动和停止容器\" class=\"headerlink\" title=\"3.5 启动和停止容器\"></a>3.5 启动和停止容器</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">docker start 容器id #启动容器\ndocker restart 容器id #重启容器\ndocker stop 容器id #停止当前正在运行的容器\ndocker kill 容器id #强制停止当前容器</code></pre>\n\n<h2 id=\"4-其他常用命令\"><a href=\"#4-其他常用命令\" class=\"headerlink\" title=\"4 其他常用命令\"></a>4 其他常用命令</h2><h3 id=\"4-1-后台启动命令\"><a href=\"#4-1-后台启动命令\" class=\"headerlink\" title=\"4.1 后台启动命令\"></a>4.1 后台启动命令</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">docker run -d 镜像名\n#测试\n[root@iZvqu2nti7lrv4Z ~]# docker run -d centos\nUnable to find image &#39;centos:latest&#39; locally\nlatest: Pulling from library&#x2F;centos\n7a0437f04f83: Already exists \nDigest: sha256:5528e8b1b1719d34604c87e11dcd1c0a20bedf46e83b5632cdeac91b8c04efc1\nStatus: Downloaded newer image for centos:latest\n84731d41bcb3b5d368e6f262e49bae78e8a491e776efe5b0b44fd1e9155f0131\n[root@iZvqu2nti7lrv4Z ~]# docker ps\nCONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                                       NAMES\ne4aa89a6f9ef   tomcat         &quot;catalina.sh run&quot;        9 minutes ago   Up 9 minutes   0.0.0.0:9000-&gt;8080&#x2F;tcp, :::9000-&gt;8080&#x2F;tcp   tomcat_test\n8da52d98564e   2307f21b0d43   &quot;java -jar &#x2F;app.jar …&quot;   41 hours ago    Up 41 hours    0.0.0.0:8999-&gt;8082&#x2F;tcp, :::8999-&gt;8082&#x2F;tcp   caffeine\n[root@iZvqu2nti7lrv4Z ~]# \n\n#可以发现在docker ps下并没有刚才启动的centos容器，这是一个常见的坑：\n# docker容器使用后台运行，必须要有一个前台进程，docker发现没有应用，就会自动停止\n#比如nginx容器启动后，发现自己没有提供服务，就会立刻停止</code></pre>\n\n<h3 id=\"4-2-查看日志\"><a href=\"#4-2-查看日志\" class=\"headerlink\" title=\"4.2 查看日志\"></a>4.2 查看日志</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@iZvqu2nti7lrv4Z ~]# docker logs --help\n\nUsage:  docker logs [OPTIONS] CONTAINER\n\nFetch the logs of a container\n\nOptions:\n      --details        Show extra details provided to logs\n  -f, --follow         Follow log output\n      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or\n                       relative (e.g. 42m for 42 minutes)\n  -n, --tail string    Number of lines to show from the end of the logs (default &quot;all&quot;)\n  -t, --timestamps     Show timestamps\n      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or\n                       relative (e.g. 42m for 42 minutes)\n[root@iZvqu2nti7lrv4Z ~]# \n</code></pre>\n\n<h3 id=\"4-3-查看容器中进程信息\"><a href=\"#4-3-查看容器中进程信息\" class=\"headerlink\" title=\"4.3 查看容器中进程信息\"></a>4.3 查看容器中进程信息</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker top 容器id</code></pre>\n\n<h3 id=\"4-4-查看镜像的元数据\"><a href=\"#4-4-查看镜像的元数据\" class=\"headerlink\" title=\"4.4 查看镜像的元数据\"></a>4.4 查看镜像的元数据</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">docker inspect 容器id</code></pre>\n\n<h3 id=\"4-5-进入当前正在运行的容器\"><a href=\"#4-5-进入当前正在运行的容器\" class=\"headerlink\" title=\"4.5 进入当前正在运行的容器\"></a>4.5 进入当前正在运行的容器</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#方式一\ndocker exec -it 容器id bashshell\n\n#方式二\ndocker attach 容器id</code></pre>\n\n<h3 id=\"4-6-从容器内拷贝内容到主机\"><a href=\"#4-6-从容器内拷贝内容到主机\" class=\"headerlink\" title=\"4.6 从容器内拷贝内容到主机\"></a>4.6 从容器内拷贝内容到主机</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">docker cp 容器id：容器内路径 主机目的路径</code></pre>\n\n<h1 id=\"四-小结\"><a href=\"#四-小结\" class=\"headerlink\" title=\"四 小结\"></a>四 小结</h1><h2 id=\"1-常用命令总结\"><a href=\"#1-常用命令总结\" class=\"headerlink\" title=\"1 常用命令总结\"></a>1 常用命令总结</h2><p><img src=\"https://markcwg-blog.oss-cn-chengdu.aliyuncs.com/uPic/srchttp3A2F2Fimg2020.cnblogs.com2Fblog2F7821752F2020062F782175-20200602145231389-161678341.pngreferhttp3A2F2Fimg2020.cnblogs9fd1197011249766.jpg\" alt=\"srchttp3A2F2Fimg2020.cnblogs.com2Fblog2F7821752F2020062F782175-20200602145231389-161678341.pngreferhttp3A2F2Fimg2020.cnblogs9fd1197011249766.jpg\"></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">attach\t\tAttach local standard input, output, and error streams to a running container #当前shell下 attach连接指定运行的镜像\nbuild \t\tBuild an image from a Dockerfile # 通过Dockerfile定制镜像\ncommit \t\tCreate a new image from a container&#39;s changes #提交当前容器为新的镜像\ncp \t\t\tCopy files&#x2F;folders between a container and the local filesystem #拷贝文件\ncreate \t\tCreate a new container #创建一个新的容器\ndiff \t\tInspect changes to files or directories on a container&#39;s filesystem #查看docker容器的变化\nevents \t\tGet real time events from the server # 从服务获取容器实时时间\nexec \t\tRun a command in a running container # 在运行中的容器上运行命令\nexport \t\tExport a container&#39;s filesystem as a tar archive #导出容器文件系统作为一个tar归档文件[对应import]\nhistory \tShow the history of an image # 展示一个镜像形成历史\nimages \t\tList images #列出系统当前的镜像\nimport \t\tImport the contents from a tarball to create a filesystem image #从tar包中导入内容创建一个文件系统镜像\ninfo \t\tDisplay system-wide information # 显示全系统信息\ninspect \tReturn low-level information on Docker objects #查看容器详细信息\nkill \t\tKill one or more running containers # kill指定docker容器\nload \t\tLoad an image from a tar archive or STDIN #从一个tar包或标准输入中加载一个镜像[对应save]\nlogin \t\tLog in to a Docker registry #\nlogout \t\tLog out from a Docker registry\nlogs \t\tFetch the logs of a container\npause \t\tPause all processes within one or more containers\nport \t\tList port mappings or a specific mapping for the container\nps \t\t\tList containers\npull \t\tPull an image or a repository from a registry\npush \t\tPush an image or a repository to a registry\nrename \t\tRename a container\nrestart \tRestart one or more containers\nrm \t\t\tRemove one or more containers\nrmi \t\tRemove one or more images\nrun \t\tRun a command in a new container\nsave \t\tSave one or more images to a tar archive (streamed to STDOUT by default)\nsearch \t\tSearch the Docker Hub for images\nstart \t\tStart one or more stopped containers\nstats \t\tDisplay a live stream of container(s) resource usage statistics\nstop \t\tStop one or more running containers\ntag \t\tCreate a tag TARGET_IMAGE that refers to SOURCE_IMAGE\ntop \t\tDisplay the running processes of a container\nunpause \tUnpause all processes within one or more containers\nupdate \t\tUpdate configuration of one or more containers\nversion \tShow the Docker version information\nwait \t\tBlock until one or more containers stop, then print their exit codes</code></pre>\n\n<h2 id=\"2-实战\"><a href=\"#2-实战\" class=\"headerlink\" title=\"2 实战\"></a>2 实战</h2><h3 id=\"2-1-部署nginx\"><a href=\"#2-1-部署nginx\" class=\"headerlink\" title=\"2.1 部署nginx\"></a>2.1 部署nginx</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@iZvqu2nti7lrv4Z ~]# docker run -d --name nginx01 -p 8888:80 nginx\n82c81f57ad6c802a188e6390bf461978b2c4ec10bb6535ff78bdc6590680c5a3\n[root@iZvqu2nti7lrv4Z ~]# docker ps\nCONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                                   NAMES\n82c81f57ad6c   nginx     &quot;&#x2F;docker-entrypoint.…&quot;   7 seconds ago   Up 6 seconds   0.0.0.0:8888-&gt;80&#x2F;tcp, :::8888-&gt;80&#x2F;tcp   nginx01\n\n#测试\n[root@iZvqu2nti7lrv4Z ~]# curl localhost:8888\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Welcome to nginx!&lt;&#x2F;title&gt;\n&lt;style&gt;\n    body &#123;\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    &#125;\n&lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;h1&gt;Welcome to nginx!&lt;&#x2F;h1&gt;\n&lt;p&gt;If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.&lt;&#x2F;p&gt;\n\n&lt;p&gt;For online documentation and support please refer to\n&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;nginx.org&#x2F;&quot;&gt;nginx.org&lt;&#x2F;a&gt;.&lt;br&#x2F;&gt;\nCommercial support is available at\n&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;nginx.com&#x2F;&quot;&gt;nginx.com&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;\n\n&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这里有一个问题，当我们每次修改nginx的配置文件时，都需要进入容器内部，十分麻烦。后续有解决方案</p></blockquote>\n<h3 id=\"2-2-部署tomcat\"><a href=\"#2-2-部署tomcat\" class=\"headerlink\" title=\"2.2 部署tomcat\"></a>2.2 部署tomcat</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@iZvqu2nti7lrv4Z ~]# docker run -d -p 8080:8080 tomcat\n0807515f23a7052da2395f4d88c89cdaaee9f889b5c6bb1898a5efbdddf155ae\n[root@iZvqu2nti7lrv4Z ~]# curl localhost:8080\n&lt;!doctype html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;&lt;title&gt;HTTP Status 404 – Not Found&lt;&#x2F;title&gt;&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;body &#123;font-family:Tahoma,Arial,sans-serif;&#125; h1, h2, h3, b &#123;color:white;background-color:#525D76;&#125; h1 &#123;font-size:22px;&#125; h2 &#123;font-size:16px;&#125; h3 &#123;font-size:14px;&#125; p &#123;font-size:12px;&#125; a &#123;color:black;&#125; .line &#123;height:1px;background-color:#525D76;border:none;&#125;&lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 404 – Not Found&lt;&#x2F;h1&gt;&lt;hr class&#x3D;&quot;line&quot; &#x2F;&gt;&lt;p&gt;&lt;b&gt;Type&lt;&#x2F;b&gt; Status Report&lt;&#x2F;p&gt;&lt;p&gt;&lt;b&gt;Description&lt;&#x2F;b&gt; The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.&lt;&#x2F;p&gt;&lt;hr class&#x3D;&quot;line&quot; &#x2F;&gt;&lt;h3&gt;Apache Tomcat&#x2F;9.0.46&lt;&#x2F;h3&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;[root@iZvqu2nti7lrv4Z ~]# \n\n#镜像是精简版，保证为最小镜像。将不必要的都踢出了 -&gt; 保证最小可运行环境</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这里有一个问题，我们以后要部署的时候每次都要进入容器，岂不是很麻烦？如果在容器外有一个映射路径，我们在外部放置项目，就自动同步到容器内，就完美解决</p></blockquote>\n<h3 id=\"2-3-部署es\"><a href=\"#2-3-部署es\" class=\"headerlink\" title=\"2.3 部署es\"></a>2.3 部署es</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 创建启动一个es7.6.2的容器\n[root@iZvqu2nti7lrv4Z ~]# docker run -d --name es01 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type&#x3D;single-node&quot; elasticsearch:7.6.2\nfdca27a465a1da6c1635c0667f8b147e5b61d295ef29bb64eadefa42f50f416e\n[root@iZvqu2nti7lrv4Z ~]# docker stats es01\n# 这里使用docker stats命令查看该镜像的内存占用状态</code></pre>\n\n<p><img src=\"https://markcwg-blog.oss-cn-chengdu.aliyuncs.com/uPic/es-stats013f8e16343988572b.png\" alt=\"es-stats013f8e16343988572b.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>发现仅是启动 一个ES容器，就让内存处于高度占用状态，所以启动es需要做内存限制</p></blockquote>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#内存限制启动\n[root@iZvqu2nti7lrv4Z ~]# docker run -d --name es02 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type&#x3D;single-node&quot; -e ES_JAVA_OPTS&#x3D;&quot;-Xms64m -Xmx512m&quot; elasticsearch:7.6.2\n7af7003f7bd2710b28f10af5179212715bdcb30507b5b4e1b2766b5040f3f59e\n[root@iZvqu2nti7lrv4Z ~]# docker stats es02\n</code></pre>\n\n<p><img src=\"https://markcwg-blog.oss-cn-chengdu.aliyuncs.com/uPic/es-stats02a6760f595ce8114e.png\" alt=\"es-stats02a6760f595ce8114e.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>可以发现，内存使用情况明显优化</p></blockquote>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 使用curl命令测试\n[root@iZvqu2nti7lrv4Z ~]# curl localhost:9200\n&#123;\n  &quot;name&quot; : &quot;7af7003f7bd2&quot;,\n  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,\n  &quot;cluster_uuid&quot; : &quot;eSOu8veQThSYjAh8ArYCOg&quot;,\n  &quot;version&quot; : &#123;\n    &quot;number&quot; : &quot;7.6.2&quot;,\n    &quot;build_flavor&quot; : &quot;default&quot;,\n    &quot;build_type&quot; : &quot;docker&quot;,\n    &quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,\n    &quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;,\n    &quot;build_snapshot&quot; : false,\n    &quot;lucene_version&quot; : &quot;8.4.0&quot;,\n    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,\n    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;\n  &#125;,\n  &quot;tagline&quot; : &quot;You Know, for Search&quot;\n&#125;\n</code></pre>\n\n<h1 id=\"五-Docker镜像\"><a href=\"#五-Docker镜像\" class=\"headerlink\" title=\"五 Docker镜像\"></a>五 Docker镜像</h1><h2 id=\"1-镜像是什么\"><a href=\"#1-镜像是什么\" class=\"headerlink\" title=\"1 镜像是什么\"></a>1 镜像是什么</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>镜像是一种轻量级、可执行的独立软件包。用来打包软件运行环境和给予运行环境开发的软件，它包含运行某一个软件所需要的所有内容（源代码、运行时库、环境变量和配置文件等等）</p>\n<p>将所有的应用和环境，直接打包为docker镜像，就可以直接运行</p></blockquote>\n<h2 id=\"2-Docker镜像加载原理\"><a href=\"#2-Docker镜像加载原理\" class=\"headerlink\" title=\"2 Docker镜像加载原理\"></a>2 Docker镜像加载原理</h2><h3 id=\"2-1-UnionFs-联合文件系统\"><a href=\"#2-1-UnionFs-联合文件系统\" class=\"headerlink\" title=\"2.1 UnionFs 联合文件系统\"></a>2.1 UnionFs 联合文件系统</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> UnionFs（联合文件系统）：Union文件系统（UnionFs）是一种分层、轻量级并且高性能的文件系统，它支持将对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（ unite several directories into a single virtual filesystem)。Union文件系统是 Docker镜像的基础。</p>\n<p>镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应 用镜像。 </p>\n<p><strong>特性</strong>：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系 统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p></blockquote>\n<h3 id=\"2-2-Docker镜像加载原理\"><a href=\"#2-2-Docker镜像加载原理\" class=\"headerlink\" title=\"2.2 Docker镜像加载原理\"></a>2.2 Docker镜像加载原理</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>docker的镜像实际上是由一层一层的文件系统组成的。</p>\n<p>boots(boot file system）主要包含 bootloader和 Kernel, bootloader主要是引导加 kernel, Linux刚启动时会加bootfs文件系统，在 Docker镜像的最底层是 boots。这一层与我们典型的 Linux/Unix系统是一样的，包含boot加載器和内核。当boot加载完成之后整个内核就都在内存中了，此时 内存的使用权已由 bootfs转交给内核，此时系统也会卸载bootfs。</p>\n<p> rootfs（root file system),在 bootfs之上。包含的就是典型 Linux系统中 的/dev,/proc,/bin,/etc等标准目录和文件。 rootfs就是各种不同的操作系统发行版，比如 Ubuntu, Centos等等。</p></blockquote>\n<h3 id=\"2-3-为什么Docker很小，而虚拟机很大\"><a href=\"#2-3-为什么Docker很小，而虚拟机很大\" class=\"headerlink\" title=\"2.3 为什么Docker很小，而虚拟机很大\"></a>2.3 为什么Docker很小，而虚拟机很大</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>对于一个精简的OS， rootfs可以很小。只需要包含最基本的命令、工具和程序就可以了，因为底层直接用Host的kernel，自己只要提供rootfs就可以了。由此可见对于不同的Linux发行版，bootfs基本是一致的，rootfs会有差别。因此不同的发行版可以公用bootfs</p></blockquote>\n<h3 id=\"2-2-commit命令\"><a href=\"#2-2-commit命令\" class=\"headerlink\" title=\"2.2 commit命令\"></a>2.2 commit命令</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">docker commit #提交容器成为一个新的镜像\n\n#命令和git类似\ndocker commit -m&#x3D;“描述信息” -a&#x3D;”作者信息“ 容器id 目标镜像名[:TAG]</code></pre>\n\n<h1 id=\"六-容器数据卷\"><a href=\"#六-容器数据卷\" class=\"headerlink\" title=\"六 容器数据卷\"></a>六 容器数据卷</h1><h2 id=\"1-数据卷概述\"><a href=\"#1-数据卷概述\" class=\"headerlink\" title=\"1 数据卷概述\"></a>1 数据卷概述</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>docker将应用和环境打包成一个镜像。如果数据都在容器中，那么删除容器之后，数据就会丢失。我们需要保持数据持久化。</p>\n<p>容器之间可以有一个数据共享的技术。 Docker容器产生的数据也可以同步到本地，这就是卷技术。目录的挂载，将我们容器内的目录挂载到宿主机上</p></blockquote>\n<h2 id=\"2-使用数据卷\"><a href=\"#2-使用数据卷\" class=\"headerlink\" title=\"2 使用数据卷\"></a>2 使用数据卷</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#使用 -v 命令挂载\ndocker run -it -v 主机目录:容器内目录 -p 主机端口:容器内端口\n\n#测试\n#启动一个centos容器\n[root@iZvqu2nti7lrv4Z ~]# docker run -it -v &#x2F;home&#x2F;docker-test-volume&#x2F;test:&#x2F;home centos &#x2F;bin&#x2F;bash\n#进入容器内部并新建文件test.java\n[root@736c6060e2af &#x2F;]# cd &#x2F;home\n[root@736c6060e2af home]# ls -l\ntotal 0\n[root@736c6060e2af home]# touch test.java\n[root@736c6060e2af home]# ls -l\ntotal 0\n-rw-r--r-- 1 root root 0 May 28 12:48 test.java\n#使用快捷键Ctrl+P+Q不停止容器的方式退出容器\n[root@736c6060e2af home]# [root@iZvqu2nti7lrv4Z ~]# \n#在宿主机对应的目录下出现了相同文件\n[root@iZvqu2nti7lrv4Z ~]# cd &#x2F;home&#x2F;docker-test-volume&#x2F;test&#x2F;\n[root@iZvqu2nti7lrv4Z test]# ll -l\ntotal 0\n-rw-r--r-- 1 root root 0 May 28 20:48 test.java\n[root@iZvqu2nti7lrv4Z test]# \n</code></pre>\n\n<h2 id=\"3-具名和匿名挂载\"><a href=\"#3-具名和匿名挂载\" class=\"headerlink\" title=\"3 具名和匿名挂载\"></a>3 具名和匿名挂载</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#匿名挂载\n-v 容器内路径\n[root@iZvqu2nti7lrv4Z test]# docker run -d -P --name nginx01 -v &#x2F;etc&#x2F;nginx nginx\n#查看所有volume情况\n[root@iZvqu2nti7lrv4Z test]# docker volume ls\nDRIVER    VOLUME NAME\nlocal     5b675e30f9d5e407233f4b4c1ac83c0ee1bee4568ca5b5feabd64e500f0b1005\nlocal     56d537304857d5f897c99723e18881f17796ec14ea303d261cced0a7055bac55\nlocal     988ec326af3eb9aaebfbf2d97ec2c536b0a30ca6e697ba2bef5e8f413b75a9c7\nlocal     3787a4575d7b7f93bb890f510ba922389b9b58f81e6b30ca4d01e966ce43341f\nlocal     05979ca458ff2f55bae1b0d98d95c506737e1b4a7a254b8b4a4005df0542c9c3\nlocal     1822937c3bdec2296f429a4ad5c49010e1d0400396e8ca60c304ba451dd285f9\nlocal     62088671585a06d219957df4ee739dddb76924b6514588e026519dff60d416d7\nlocal     e7a09b9bac98c36cfec787aed4ada3a3af73d9cb9069079285322361d7f6c420\nlocal     f979d4899f7cdeeea713242faff699d8daa611359de9396fac7edf0cccbec40e\n#具名挂载\n[root@iZvqu2nti7lrv4Z test]# docker run -d -P --name nginx02 -v juming-nginx:&#x2F;etc&#x2F;nginx nginx\nDRIVER    VOLUME NAME\nlocal     5b675e30f9d5e407233f4b4c1ac83c0ee1bee4568ca5b5feabd64e500f0b1005\nlocal     56d537304857d5f897c99723e18881f17796ec14ea303d261cced0a7055bac55\nlocal     988ec326af3eb9aaebfbf2d97ec2c536b0a30ca6e697ba2bef5e8f413b75a9c7\nlocal     3787a4575d7b7f93bb890f510ba922389b9b58f81e6b30ca4d01e966ce43341f\nlocal     05979ca458ff2f55bae1b0d98d95c506737e1b4a7a254b8b4a4005df0542c9c3\nlocal     1822937c3bdec2296f429a4ad5c49010e1d0400396e8ca60c304ba451dd285f9\nlocal     62088671585a06d219957df4ee739dddb76924b6514588e026519dff60d416d7\nlocal     e7a09b9bac98c36cfec787aed4ada3a3af73d9cb9069079285322361d7f6c420\nlocal     f979d4899f7cdeeea713242faff699d8daa611359de9396fac7edf0cccbec40e\nlocal     juming-nginx\n# 可以查看这个卷\n[root@iZvqu2nti7lrv4Z test]# docker volume inspect juming-nginx\n[\n    &#123;\n        &quot;CreatedAt&quot;: &quot;2021-05-28T20:55:41+08:00&quot;,\n        &quot;Driver&quot;: &quot;local&quot;,\n        &quot;Labels&quot;: null,\n        &quot;Mountpoint&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;juming-nginx&#x2F;_data&quot;,\n        &quot;Name&quot;: &quot;juming-nginx&quot;,\n        &quot;Options&quot;: null,\n        &quot;Scope&quot;: &quot;local&quot;\n    &#125;\n]</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>所有的docker容器内的卷，没有指定目录的情况下都是在 /var/lib/docker/volumes/xxxx/_data 下 如果指定了目录，docker volume ls 是查看不到的。</p></blockquote>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#三钟挂载： 匿名挂载、具名挂载、指定路径挂载\n-v 容器内路径\t\t     #匿名挂载\n-v 卷名:容器内路径\t\t   \t#具名挂载\n-v &#x2F;宿主机路径:容器内路径\t  #指定路径挂载</code></pre>\n\n<ul>\n<li>扩展</li>\n</ul>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 通过 -v 容器内路径： ro rw 改变读写权限\nro #readonly 只读\nrw #readwrite 可读可写\ndocker run -d -P --name nginx05 -v juming:&#x2F;etc&#x2F;nginx:ro nginx\ndocker run -d -P --name nginx05 -v juming:&#x2F;etc&#x2F;nginx:rw nginx\n# ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作！</code></pre>\n\n<h2 id=\"4-初始Dockerfile\"><a href=\"#4-初始Dockerfile\" class=\"headerlink\" title=\"4 初始Dockerfile\"></a>4 初始Dockerfile</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 创建一个dockerfile文件，名字可以随便 建议Dockerfile\n# 文件中的内容 指令(大写) 参数\nFROM centos\nVOLUME [&quot;volume01&quot;,&quot;volume02&quot;]\nCMD echo &quot;----end----&quot;\nCMD &#x2F;bin&#x2F;bash\n#这里的每个命令，就是镜像的一层\n\n#启动自己的镜像,注意 docker build命令最后有一个. 缺少这个.会报错\n[root@iZvqu2nti7lrv4Z ~]# docker build -f &#x2F;home&#x2F;docker-test-volume&#x2F;dockerfile1 -t myself&#x2F;centos:1.0 .\nSending build context to Docker daemon  307.3kB\nStep 1&#x2F;4 : FROM centos\n ---&gt; 300e315adb2f\nStep 2&#x2F;4 : VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]\n ---&gt; Running in d0efeffa082f\nRemoving intermediate container d0efeffa082f\n ---&gt; d902d4cc0fca\nStep 3&#x2F;4 : CMD echo &quot;......end......&quot;\n ---&gt; Running in 77df08d8bb74\nRemoving intermediate container 77df08d8bb74\n ---&gt; 293026ed5542\nStep 4&#x2F;4 : CMD &#x2F;bin&#x2F;bash\n ---&gt; Running in 24b146eed903\nRemoving intermediate container 24b146eed903\n ---&gt; ac1708167fec\nSuccessfully built ac1708167fec\nSuccessfully tagged myself&#x2F;centos:1.0\n</code></pre>\n\n<h1 id=\"七-Dockerfile\"><a href=\"#七-Dockerfile\" class=\"headerlink\" title=\"七 Dockerfile\"></a>七 Dockerfile</h1><h2 id=\"1-Dockerfile介绍\"><a href=\"#1-Dockerfile介绍\" class=\"headerlink\" title=\"1 Dockerfile介绍\"></a>1 Dockerfile介绍</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Dockerfile是用来构建docker镜像的文件。命令参数脚本</p>\n<p>构建步骤：</p>\n<ol>\n<li>编写一个dockerfile文件</li>\n<li>docker build 构建为一个镜像</li>\n<li>docker run运行镜像</li>\n<li>docker push发布镜像（DockerHub、阿里云仓库）</li>\n</ol></blockquote>\n<h2 id=\"2-Dockerfile构建过程\"><a href=\"#2-Dockerfile构建过程\" class=\"headerlink\" title=\"2 Dockerfile构建过程\"></a>2 Dockerfile构建过程</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>基础知识：</strong></p>\n<ol>\n<li>每个保留关键字（指令）都必须是大写字母</li>\n<li>执行顺序为从上到下</li>\n<li>#表示注释</li>\n<li>每一个指令都会创建并提交一个新的镜像</li>\n</ol>\n<p>Dockerfile是面向开发的，我们以后要发布项目、做镜像都需要编写Dockerfile文件。</p></blockquote>\n<h2 id=\"3-Dockerfile常用指令\"><a href=\"#3-Dockerfile常用指令\" class=\"headerlink\" title=\"3 Dockerfile常用指令\"></a>3 Dockerfile常用指令</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">FROM \t\t\t# 基础镜像，一切从这里开始构建\nMAINTAINER \t\t# 镜像是谁写的， 姓名+邮箱\nRUN \t\t\t# 镜像构建的时候需要运行的命令\nADD \t\t\t# 步骤，tomcat镜像，这个tomcat压缩包！添加内容 添加同目录\nWORKDIR \t\t# 镜像的工作目录\nVOLUME \t\t\t# 挂载的目录\nEXPOSE \t\t\t# 保留端口配置\nCMD \t\t\t# 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代。\nENTRYPOINT \t\t# 指定这个容器启动的时候要运行的命令，可以追加命令\nONBUILD \t\t# 当构建一个被继承 DockerFile 这个时候就会运行ONBUILD的指令，触发指令。\nCOPY \t\t\t# 类似ADD，将我们文件拷贝到镜像中\nENV \t\t\t# 构建的时候设置环境变量！</code></pre>\n\n<h2 id=\"4-实战测试：制作一个tomcat镜像\"><a href=\"#4-实战测试：制作一个tomcat镜像\" class=\"headerlink\" title=\"4 实战测试：制作一个tomcat镜像\"></a>4 实战测试：制作一个tomcat镜像</h2><h3 id=\"4-1-准备镜像文件\"><a href=\"#4-1-准备镜像文件\" class=\"headerlink\" title=\"4.1 准备镜像文件\"></a>4.1 准备镜像文件</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#去官网下载压缩包，使用ftp上传到linux中\n[root@iZvqu2nti7lrv4Z tomcat]# ls -l\ntotal 151588\n-rw-r--r-- 1 root root  11496577 May 26 15:46 apache-tomcat-9.0.46.tar.gz\n-rw-r--r-- 1 root root       640 May 26 16:12 Dockerfile\n-rw-r--r-- 1 root root 143722924 May 26 15:49 jdk-8u281-linux-x64.tar.gz\n-rw-r--r-- 1 root root         0 May 26 15:53 readme.txt\n</code></pre>\n\n<h3 id=\"4-2-编写Dockerfile\"><a href=\"#4-2-编写Dockerfile\" class=\"headerlink\" title=\"4.2 编写Dockerfile\"></a>4.2 编写Dockerfile</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#从centos中构建\nFROM centos\n#添加作者信息\nMAINTAINER markcwg&lt;markcwg@163.com&gt;\n#复制文件\nCOPY readme.txt &#x2F;usr&#x2F;local&#x2F;readme.txt\n#添加tomcat压缩包，build时会自动解压\nADD apache-tomcat-9.0.46.tar.gz &#x2F;usr&#x2F;local&#x2F;\n#添加jdk压缩包\nADD jdk-8u281-linux-x64.tar.gz &#x2F;usr&#x2F;local&#x2F;\n#在新镜像中安装vim命令\nRUN yum -y install vim\n#设置环境变量\nENV MYPATH &#x2F;usr&#x2F;local\nWORKDIR $MYPATH\n\nENV JAVA_HOME &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_281\nENV CLASSPATH $JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar\nENV CATALINA_HOME &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46\nENV CATALINA_BASH &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46\nENV PATH $PATH:$JAVA_HOME&#x2F;bin:$CATALINA_HOME&#x2F;lib:$CATALINA_HOME&#x2F;bin\n#向外暴露8080端口\nEXPOSE 8080\n#设置默认命令\nCMD &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46&#x2F;bin&#x2F;startup.sh &amp;&amp; tail -F &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46&#x2F;bin&#x2F;logs&#x2F;catalina.out\n</code></pre>\n\n<h3 id=\"4-3-构建镜像\"><a href=\"#4-3-构建镜像\" class=\"headerlink\" title=\"4.3 构建镜像\"></a>4.3 构建镜像</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#因为Dockerfile文件的命令是默认名，所有不用-f指定构建文件\n[root@iZvqu2nti7lrv4Z tomcat]# docker build  -t mytomcat:1.1 .\nSending build context to Docker daemon  155.2MB\nStep 1&#x2F;15 : FROM centos\n ---&gt; 300e315adb2f\nStep 2&#x2F;15 : MAINTAINER markcwg&lt;markcwg@163.com&gt;\n ---&gt; Running in efea032af268\nRemoving intermediate container efea032af268\n ---&gt; ae1e109cc4d3\nStep 3&#x2F;15 : COPY readme.txt &#x2F;usr&#x2F;local&#x2F;readme.txt\n ---&gt; e313f645396e\nStep 4&#x2F;15 : ADD apache-tomcat-9.0.46.tar.gz &#x2F;usr&#x2F;local&#x2F;\n ---&gt; 32a2d5d9e146\nStep 5&#x2F;15 : ADD jdk-8u281-linux-x64.tar.gz &#x2F;usr&#x2F;local&#x2F;\n ---&gt; 4fcf865bcd44\nStep 6&#x2F;15 : RUN yum -y install vim\n ---&gt; Running in 089e3f45170d\nCentOS Linux 8 - AppStream                      6.9 MB&#x2F;s | 6.3 MB     00:00    \nCentOS Linux 8 - BaseOS                         2.1 MB&#x2F;s | 2.3 MB     00:01    \nCentOS Linux 8 - Extras                          16 kB&#x2F;s | 9.6 kB     00:00    \nDependencies resolved.\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n Package             Arch        Version                   Repository      Size\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nInstalling:\n vim-enhanced        x86_64      2:8.0.1763-15.el8         appstream      1.4 M\nInstalling dependencies:\n gpm-libs            x86_64      1.20.7-15.el8             appstream       39 k\n vim-common          x86_64      2:8.0.1763-15.el8         appstream      6.3 M\n vim-filesystem      noarch      2:8.0.1763-15.el8         appstream       48 k\n which               x86_64      2.21-12.el8               baseos          49 k\n\nTransaction Summary\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nInstall  5 Packages\n\nTotal download size: 7.8 M\nInstalled size: 30 M\nDownloading Packages:\n(1&#x2F;5): gpm-libs-1.20.7-15.el8.x86_64.rpm        174 kB&#x2F;s |  39 kB     00:00    \n(2&#x2F;5): vim-common-8.0.1763-15.el8.x86_64.rpm     20 MB&#x2F;s | 6.3 MB     00:00    \n(3&#x2F;5): vim-filesystem-8.0.1763-15.el8.noarch.rp 494 kB&#x2F;s |  48 kB     00:00    \n(4&#x2F;5): vim-enhanced-8.0.1763-15.el8.x86_64.rpm  4.0 MB&#x2F;s | 1.4 MB     00:00    \n(5&#x2F;5): which-2.21-12.el8.x86_64.rpm             2.1 MB&#x2F;s |  49 kB     00:00    \n--------------------------------------------------------------------------------\nTotal                                           3.8 MB&#x2F;s | 7.8 MB     00:02     \nwarning: &#x2F;var&#x2F;cache&#x2F;dnf&#x2F;appstream-02e86d1c976ab532&#x2F;packages&#x2F;gpm-libs-1.20.7-15.el8.x86_64.rpm: Header V3 RSA&#x2F;SHA256 Signature, key ID 8483c65d: NOKEY\nCentOS Linux 8 - AppStream                      1.6 MB&#x2F;s | 1.6 kB     00:00    \nImporting GPG key 0x8483C65D:\n Userid     : &quot;CentOS (CentOS Official Signing Key) &lt;security@centos.org&gt;&quot;\n Fingerprint: 99DB 70FA E1D7 CE22 7FB6 4882 05B5 55B3 8483 C65D\n From       : &#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-centosofficial\nKey imported successfully\nRunning transaction check\nTransaction check succeeded.\nRunning transaction test\nTransaction test succeeded.\nRunning transaction\n  Preparing        :                                                        1&#x2F;1 \n  Installing       : which-2.21-12.el8.x86_64                               1&#x2F;5 \n  Installing       : vim-filesystem-2:8.0.1763-15.el8.noarch                2&#x2F;5 \n  Installing       : vim-common-2:8.0.1763-15.el8.x86_64                    3&#x2F;5 \n  Installing       : gpm-libs-1.20.7-15.el8.x86_64                          4&#x2F;5 \n  Running scriptlet: gpm-libs-1.20.7-15.el8.x86_64                          4&#x2F;5 \n  Installing       : vim-enhanced-2:8.0.1763-15.el8.x86_64                  5&#x2F;5 \n  Running scriptlet: vim-enhanced-2:8.0.1763-15.el8.x86_64                  5&#x2F;5 \n  Running scriptlet: vim-common-2:8.0.1763-15.el8.x86_64                    5&#x2F;5 \n  Verifying        : gpm-libs-1.20.7-15.el8.x86_64                          1&#x2F;5 \n  Verifying        : vim-common-2:8.0.1763-15.el8.x86_64                    2&#x2F;5 \n  Verifying        : vim-enhanced-2:8.0.1763-15.el8.x86_64                  3&#x2F;5 \n  Verifying        : vim-filesystem-2:8.0.1763-15.el8.noarch                4&#x2F;5 \n  Verifying        : which-2.21-12.el8.x86_64                               5&#x2F;5 \n\nInstalled:\n  gpm-libs-1.20.7-15.el8.x86_64         vim-common-2:8.0.1763-15.el8.x86_64    \n  vim-enhanced-2:8.0.1763-15.el8.x86_64 vim-filesystem-2:8.0.1763-15.el8.noarch\n  which-2.21-12.el8.x86_64             \n\nComplete!\nRemoving intermediate container 089e3f45170d\n ---&gt; 64ea2b10fc7c\nStep 7&#x2F;15 : ENV MYPATH &#x2F;usr&#x2F;local\n ---&gt; Running in 81236ec8fca6\nRemoving intermediate container 81236ec8fca6\n ---&gt; eb6b6f51ffb0\nStep 8&#x2F;15 : WORKDIR $MYPATH\n ---&gt; Running in e741e32b5960\nRemoving intermediate container e741e32b5960\n ---&gt; dd0a487f4a2d\nStep 9&#x2F;15 : ENV JAVA_HOME &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_281\n ---&gt; Running in 8dbfe95fd0b3\nRemoving intermediate container 8dbfe95fd0b3\n ---&gt; 6ea6169ee1ee\nStep 10&#x2F;15 : ENV CLASSPATH $JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar\n ---&gt; Running in e90cb056361d\nRemoving intermediate container e90cb056361d\n ---&gt; 5a1b948161dd\nStep 11&#x2F;15 : ENV CATALINA_HOME &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46\n ---&gt; Running in 30f905d48369\nRemoving intermediate container 30f905d48369\n ---&gt; de012879e567\nStep 12&#x2F;15 : ENV CATALINA_BASH &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46\n ---&gt; Running in ea5dca7af158\nRemoving intermediate container ea5dca7af158\n ---&gt; 99ab62f6273a\nStep 13&#x2F;15 : ENV PATH $PATH:$JAVA_HOME&#x2F;bin:$CATALINA_HOME&#x2F;lib:$CATALINA_HOME&#x2F;bin\n ---&gt; Running in 6696d365be61\nRemoving intermediate container 6696d365be61\n ---&gt; 5d2990e0a50a\nStep 14&#x2F;15 : EXPOSE 8080\n ---&gt; Running in dcae8528fd4d\nRemoving intermediate container dcae8528fd4d\n ---&gt; e4fe06ff860b\nStep 15&#x2F;15 : CMD &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46&#x2F;bin&#x2F;startup.sh &amp;&amp; tail -F &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46&#x2F;bin&#x2F;logs&#x2F;catalina.out\n ---&gt; Running in ef6b1d933cc8\nRemoving intermediate container ef6b1d933cc8\n ---&gt; e68214b7b889\nSuccessfully built e68214b7b889\nSuccessfully tagged mytomcat:1.1\n</code></pre>\n\n<h3 id=\"4-4-运行镜像\"><a href=\"#4-4-运行镜像\" class=\"headerlink\" title=\"4.4 运行镜像\"></a>4.4 运行镜像</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@iZvqu2nti7lrv4Z tomcat]# docker run -d -p 8080:8080 --name test-tomcat mytomcat:1.1\ncfe53d1d9fe74f6d29a7a22b9d95ba437c311f8ed75b58db1a7fe02609082d87\n</code></pre>\n\n<h3 id=\"4-5-访问测试\"><a href=\"#4-5-访问测试\" class=\"headerlink\" title=\"4.5 访问测试\"></a>4.5 访问测试</h3><p><img src=\"https://markcwg-blog.oss-cn-chengdu.aliyuncs.com/uPic/tomcatfc72f3b6110db8c9.png\" alt=\"tomcatfc72f3b6110db8c9.png\"></p>\n<h1 id=\"八-Springboot项目打包\"><a href=\"#八-Springboot项目打包\" class=\"headerlink\" title=\"八 Springboot项目打包\"></a>八 Springboot项目打包</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li><p>新建一个spingboot项目，也可以直接 <code>git clone <a href=\"mailto:&#x67;&#x69;&#x74;&#x40;&#103;&#105;&#x74;&#x68;&#117;&#98;&#x2e;&#99;&#x6f;&#109;\">&#x67;&#x69;&#x74;&#x40;&#103;&#105;&#x74;&#x68;&#117;&#98;&#x2e;&#99;&#x6f;&#109;</a>:markcwg/caffeine.git</code></p>\n</li>\n<li><p>mvn package将项目打包</p>\n</li>\n<li><p>新建并编写Dockerfile</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">FROM java:8\n\nCOPY *.jar &#x2F;app.jar\n\nCMD [&quot;--server.port&#x3D;8082&quot;]\n\nEXPOSE 8082\n\nENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;&#x2F;app.jar&quot;]</code></pre></li>\n<li><p>构建镜像</p>\n</li>\n<li><p>发布运行</p>\n</li>\n</ol></blockquote>\n","feature":true,"pinned":true,"text":"零 特别说明 本文是学习B站狂神说java的课程之后，整理而出 对原课程感兴趣的小伙伴，可以点击传送门 一 Docker概述1 Docker简介Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Wi...","link":"","photos":[],"count_time":{"symbolsCount":"35k","symbolsTime":"32 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":4,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"Docker","slug":"Docker","count":1,"path":"api/tags/Docker.json"},{"name":"DevOps","slug":"DevOps","count":1,"path":"api/tags/DevOps.json"},{"name":"容器化技术","slug":"容器化技术","count":1,"path":"api/tags/容器化技术.json"},{"name":"自动部署","slug":"自动部署","count":1,"path":"api/tags/自动部署.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9B%B6-%E7%89%B9%E5%88%AB%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">零 特别说明</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80-Docker%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">一 Docker概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-Docker%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1 Docker简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-Docker%E7%9A%84%E5%8E%86%E5%8F%B2\"><span class=\"toc-text\">2 Docker的历史</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C-Docker%E7%9A%84%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">二 Docker的安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-Docker%E7%BB%84%E6%88%90\"><span class=\"toc-text\">1 Docker组成</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%AE%89%E8%A3%85Docker\"><span class=\"toc-text\">2 安装Docker</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\"><span class=\"toc-text\">2.1 环境准备</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">2.2 安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F\"><span class=\"toc-text\">2.3 阿里云镜像加速</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">3 工作原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-Docker%E6%98%AF%E6%80%8E%E6%A0%B7%E5%B7%A5%E4%BD%9C%E7%9A%84\"><span class=\"toc-text\">3.1 Docker是怎样工作的</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-Docker%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AF%94VM%E5%BF%AB\"><span class=\"toc-text\">3.2 Docker为什么比VM快</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89-Docker%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">三 Docker的常用命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%B8%AE%E5%8A%A9%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">1 帮助命令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E9%95%9C%E5%83%8F%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">2 镜像命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-docker-images\"><span class=\"toc-text\">2.1 docker images</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-docker-pull\"><span class=\"toc-text\">2.2 docker pull</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-docker-rmi\"><span class=\"toc-text\">2.3 docker rmi</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3 容器命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E6%96%B0%E5%BB%BA%E5%AE%B9%E5%99%A8%E5%B9%B6%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">3.1 新建容器并启动</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E8%BF%90%E8%A1%8C%E7%9A%84%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3.2 列出所有运行的容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-%E9%80%80%E5%87%BA%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3.3 退出容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-%E5%88%A0%E9%99%A4%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3.4 删除容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-%E5%90%AF%E5%8A%A8%E5%92%8C%E5%81%9C%E6%AD%A2%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3.5 启动和停止容器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%85%B6%E4%BB%96%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">4 其他常用命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E5%90%8E%E5%8F%B0%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">4.1 后台启动命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">4.2 查看日志</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%BF%9B%E7%A8%8B%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">4.3 查看容器中进程信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-%E6%9F%A5%E7%9C%8B%E9%95%9C%E5%83%8F%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">4.4 查看镜像的元数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-%E8%BF%9B%E5%85%A5%E5%BD%93%E5%89%8D%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">4.5 进入当前正在运行的容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-6-%E4%BB%8E%E5%AE%B9%E5%99%A8%E5%86%85%E6%8B%B7%E8%B4%9D%E5%86%85%E5%AE%B9%E5%88%B0%E4%B8%BB%E6%9C%BA\"><span class=\"toc-text\">4.6 从容器内拷贝内容到主机</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">四 小结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">1 常用命令总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%AE%9E%E6%88%98\"><span class=\"toc-text\">2 实战</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E9%83%A8%E7%BD%B2nginx\"><span class=\"toc-text\">2.1 部署nginx</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E9%83%A8%E7%BD%B2tomcat\"><span class=\"toc-text\">2.2 部署tomcat</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E9%83%A8%E7%BD%B2es\"><span class=\"toc-text\">2.3 部署es</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%94-Docker%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">五 Docker镜像</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E9%95%9C%E5%83%8F%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">1 镜像是什么</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">2 Docker镜像加载原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-UnionFs-%E8%81%94%E5%90%88%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">2.1 UnionFs 联合文件系统</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">2.2 Docker镜像加载原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E4%B8%BA%E4%BB%80%E4%B9%88Docker%E5%BE%88%E5%B0%8F%EF%BC%8C%E8%80%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BE%88%E5%A4%A7\"><span class=\"toc-text\">2.3 为什么Docker很小，而虚拟机很大</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-commit%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">2.2 commit命令</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%AD-%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7\"><span class=\"toc-text\">六 容器数据卷</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1 数据卷概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%8D%B7\"><span class=\"toc-text\">2 使用数据卷</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%85%B7%E5%90%8D%E5%92%8C%E5%8C%BF%E5%90%8D%E6%8C%82%E8%BD%BD\"><span class=\"toc-text\">3 具名和匿名挂载</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%88%9D%E5%A7%8BDockerfile\"><span class=\"toc-text\">4 初始Dockerfile</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%83-Dockerfile\"><span class=\"toc-text\">七 Dockerfile</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-Dockerfile%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">1 Dockerfile介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-Dockerfile%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">2 Dockerfile构建过程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-Dockerfile%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">3 Dockerfile常用指令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%AE%9E%E6%88%98%E6%B5%8B%E8%AF%95%EF%BC%9A%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AAtomcat%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">4 实战测试：制作一个tomcat镜像</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E5%87%86%E5%A4%87%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">4.1 准备镜像文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E7%BC%96%E5%86%99Dockerfile\"><span class=\"toc-text\">4.2 编写Dockerfile</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">4.3 构建镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-%E8%BF%90%E8%A1%8C%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">4.4 运行镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-%E8%AE%BF%E9%97%AE%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">4.5 访问测试</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%AB-Springboot%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85\"><span class=\"toc-text\">八 Springboot项目打包</span></a></li></ol>","author":{"name":"Markcwg","slug":"blog-author","avatar":"https://i.picsum.photos/id/1006/3000/2000.jpg?hmac=x83pQQ7LW1UTo8HxBcIWuRIVeN_uCg0cG6keXvNvM8g","link":"/","description":"多年以来，她一直在一处山中修道幽居，不来见我。何处山头？在我心中而已","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"封装一个自己的 redis-starter","uid":"15f05080c5d9982936ed8c1ae1c1de24","slug":"starter-demo","date":"2021-08-10T07:04:34.000Z","updated":"2021-08-10T08:33:39.802Z","comments":true,"path":"api/articles/starter-demo.json","keywords":null,"cover":"https://markcwg-blog.oss-cn-chengdu.aliyuncs.com/uPic/starter-icon.jpeg","text":"0 写在前面SpringBoot 中有一个非常重要的机制——starter，它是遵循“约定大于配置”理念的一个重要表现。能够将功能集成进 starter 中，无需繁杂的配置（可以认为特指一大堆 xml 文件）即可在 maven 项目中引入并使用。日常开发中，经常会遇到一些独立于业...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"技术分享","slug":"技术分享","count":1,"path":"api/categories/技术分享.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":1,"path":"api/tags/SpringBoot.json"},{"name":"Redis","slug":"Redis","count":1,"path":"api/tags/Redis.json"},{"name":"注解","slug":"注解","count":1,"path":"api/tags/注解.json"},{"name":"AOP","slug":"AOP","count":1,"path":"api/tags/AOP.json"},{"name":"Aspect","slug":"Aspect","count":1,"path":"api/tags/Aspect.json"}],"author":{"name":"Markcwg","slug":"blog-author","avatar":"https://i.picsum.photos/id/1006/3000/2000.jpg?hmac=x83pQQ7LW1UTo8HxBcIWuRIVeN_uCg0cG6keXvNvM8g","link":"/","description":"多年以来，她一直在一处山中修道幽居，不来见我。何处山头？在我心中而已","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}